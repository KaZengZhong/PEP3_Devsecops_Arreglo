pipeline {
    agent any
    
    parameters {
        choice(
            name: 'SCAN_DEPTH',
            choices: ['QUICK', 'STANDARD', 'COMPREHENSIVE'],
            description: 'Profundidad del escaneo de seguridad'
        )
        booleanParam(
            name: 'SCAN_DATABASE',
            defaultValue: true,
            description: 'Incluir escaneo de PostgreSQL'
        )
    }
    
    environment {
        REPORTS_DIR = 'security-reports'
        FRONTEND_URL = 'http://localhost:8070'
        BACKEND_URL = 'http://localhost:8090'
        POSTGRES_HOST = 'localhost'
        POSTGRES_PORT = '5433'
    }
    
    stages {
        stage('Initialize DAST Pipeline') {
            steps {
                script {
                    echo "=== PRESTABANCO SECURITY SCAN ==="
                    echo "Frontend: ${FRONTEND_URL}"
                    echo "Backend: ${BACKEND_URL}"
                    echo "Database: ${POSTGRES_HOST}:${POSTGRES_PORT}"
                    
                    bat """
                        if exist ${REPORTS_DIR} rmdir /s /q ${REPORTS_DIR}
                        mkdir ${REPORTS_DIR}
                    """
                }
            }
        }
        
        stage('Deploy Services') {
            steps {
                script {
                    echo "Desplegando servicios..."
                    bat 'docker-compose -f compose2.yml down || echo "No containers to stop"'
                    bat 'docker-compose -f compose2.yml up -d'
                    
                    echo "Esperando inicializacion..."
                    sleep(time: 90, unit: 'SECONDS')
                }
            }
        }
        
        stage('Verify Services') {
            steps {
                script {
                    echo "Verificando servicios..."
                    
                    def frontendOk = false
                    def backendOk = false
                    def dbOk = false
                    
                    // Verificar contenedores primero
                    bat 'docker ps'
                    
                    // Frontend
                    echo "Verificando Frontend..."
                    try {
                        bat 'powershell -Command "Invoke-WebRequest -Uri http://localhost:8070 -TimeoutSec 10 -UseBasicParsing | Out-Null"'
                        frontendOk = true
                        echo "Frontend OK"
                    } catch (Exception e) {
                        echo "Frontend FAILED: ${e.message}"
                    }
                    
                    // Backend - Aceptar cualquier respuesta como OK
                    echo "Verificando Backend (403 es valido)..."
                    try {
                        // Probar con TCP connection primero
                        bat 'powershell -Command "Test-NetConnection -ComputerName localhost -Port 8090 -WarningAction SilentlyContinue"'
                        echo "Backend puerto 8090 accesible"
                        backendOk = true
                    } catch (Exception e) {
                        echo "Backend TCP test failed: ${e.message}"
                        
                        // Probar HTTP aunque de 403
                        try {
                            bat '''
                                powershell -Command "
                                try { 
                                    Invoke-WebRequest -Uri http://localhost:8090 -TimeoutSec 10 -UseBasicParsing
                                    Write-Host 'Backend HTTP OK'
                                } catch { 
                                    Write-Host 'Backend HTTP Response (403 expected)'
                                }
                                exit 0"
                            '''
                            backendOk = true
                            echo "Backend HTTP responding (403 normal)"
                        } catch (Exception e2) {
                            echo "Backend HTTP test failed: ${e2.message}"
                        }
                    }
                    
                    // Database
                    echo "Verificando Database..."
                    try {
                        bat 'powershell -Command "Test-NetConnection -ComputerName localhost -Port 5433 -WarningAction SilentlyContinue"'
                        dbOk = true
                        echo "Database OK"
                    } catch (Exception e) {
                        echo "Database FAILED: ${e.message}"
                    }
                    
                    // Verificar logs si backend falla
                    if (!backendOk) {
                        echo "Verificando logs del backend..."
                        try {
                            bat 'docker logs prestabanco-backend --tail 20 || docker logs backend --tail 20 || echo "No backend logs found"'
                        } catch (Exception e) {
                            echo "Could not get backend logs: ${e.message}"
                        }
                    }
                    
                    env.FRONTEND_OK = frontendOk.toString()
                    env.BACKEND_OK = backendOk.toString()
                    env.DATABASE_OK = dbOk.toString()
                    
                    echo "=== RESUMEN VERIFICACION ==="
                    echo "Frontend: ${frontendOk ? 'OK' : 'FAILED'}"
                    echo "Backend:  ${backendOk ? 'OK' : 'FAILED'}"
                    echo "Database: ${dbOk ? 'OK' : 'FAILED'}"
                }
            }
        }
        
        stage('Security Scan - Frontend') {
            when { expression { env.FRONTEND_OK == 'true' } }
            steps {
                script {
                    echo "Escaneando Frontend..."
                    try {
                        timeout(time: 20, unit: 'MINUTES') {
                            bat "docker run --rm --network host -v \"%cd%\\${REPORTS_DIR}:/zap/wrk\" zaproxy/zap-stable zap-baseline.py -t ${FRONTEND_URL} -J frontend-scan.json -r frontend-scan.html -d"
                        }
                        echo "Frontend scan completado"
                    } catch (Exception e) {
                        echo "Frontend scan issues: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                        
                        // Crear reporte basico si falla
                        bat """
                            echo Frontend scan attempted but had issues > ${REPORTS_DIR}\\frontend-scan.txt
                            echo Error: ${e.message} >> ${REPORTS_DIR}\\frontend-scan.txt
                        """
                    }
                }
            }
        }
        
        stage('Security Scan - Backend') {
            when { expression { env.BACKEND_OK == 'true' } }
            steps {
                script {
                    echo "Escaneando Backend..."
                    try {
                        timeout(time: 20, unit: 'MINUTES') {
                            bat "docker run --rm --network host -v \"%cd%\\${REPORTS_DIR}:/zap/wrk\" zaproxy/zap-stable zap-baseline.py -t ${BACKEND_URL} -J backend-scan.json -r backend-scan.html -d"
                        }
                        echo "Backend scan completado"
                    } catch (Exception e) {
                        echo "Backend scan issues: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                        
                        // Crear reporte basico si falla
                        bat """
                            echo Backend scan attempted but had issues > ${REPORTS_DIR}\\backend-scan.txt
                            echo Error: ${e.message} >> ${REPORTS_DIR}\\backend-scan.txt
                            echo Note: 403 responses are normal for Spring Security >> ${REPORTS_DIR}\\backend-scan.txt
                        """
                    }
                }
            }
        }
        
        stage('Alternative Backend Analysis') {
            when { expression { env.BACKEND_OK == 'false' } }
            steps {
                script {
                    echo "Backend no accesible - creando analisis alternativo..."
                    
                    bat """
                        echo BACKEND ANALYSIS - SERVICE NOT ACCESSIBLE > ${REPORTS_DIR}\\backend-analysis.txt
                        echo ============================================ >> ${REPORTS_DIR}\\backend-analysis.txt
                        echo Date: %date% %time% >> ${REPORTS_DIR}\\backend-analysis.txt
                        echo. >> ${REPORTS_DIR}\\backend-analysis.txt
                        echo STATUS: Backend service could not be verified >> ${REPORTS_DIR}\\backend-analysis.txt
                        echo TARGET: ${BACKEND_URL} >> ${REPORTS_DIR}\\backend-analysis.txt
                        echo. >> ${REPORTS_DIR}\\backend-analysis.txt
                        echo POSSIBLE CAUSES: >> ${REPORTS_DIR}\\backend-analysis.txt
                        echo - Spring Boot still initializing >> ${REPORTS_DIR}\\backend-analysis.txt
                        echo - Database connection required >> ${REPORTS_DIR}\\backend-analysis.txt
                        echo - Port 8090 not accessible >> ${REPORTS_DIR}\\backend-analysis.txt
                        echo - Container not running >> ${REPORTS_DIR}\\backend-analysis.txt
                        echo. >> ${REPORTS_DIR}\\backend-analysis.txt
                        echo CONTAINER INFO: >> ${REPORTS_DIR}\\backend-analysis.txt
                    """
                    
                    try {
                        bat 'docker ps --filter name=backend >> %cd%\\' + "${REPORTS_DIR}\\backend-analysis.txt"
                        bat 'echo. >> ' + "${REPORTS_DIR}\\backend-analysis.txt"
                        bat 'echo CONTAINER LOGS: >> ' + "${REPORTS_DIR}\\backend-analysis.txt"
                        bat 'docker logs prestabanco-backend --tail 30 >> %cd%\\' + "${REPORTS_DIR}\\backend-analysis.txt 2>&1 || echo No logs available >> %cd%\\" + "${REPORTS_DIR}\\backend-analysis.txt"
                    } catch (Exception e) {
                        bat 'echo "Could not analyze container: ' + e.message + '" >> ' + "${REPORTS_DIR}\\backend-analysis.txt"
                    }
                }
            }
        }
        
        stage('Security Scan - Database') {
            when { 
                allOf {
                    expression { params.SCAN_DATABASE == true }
                    expression { env.DATABASE_OK == 'true' }
                }
            }
            steps {
                script {
                    echo "Escaneando Database..."
                    try {
                        timeout(time: 10, unit: 'MINUTES') {
                            bat "docker run --rm --network host -v \"%cd%\\${REPORTS_DIR}:/reports\" instrumentisto/nmap -sS -sV -p 5433 ${POSTGRES_HOST} -oN /reports/database-scan.txt"
                        }
                        echo "Database scan completado"
                    } catch (Exception e) {
                        echo "Database scan issues: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Generate Summary') {
            steps {
                script {
                    echo "Generando resumen..."
                    
                    bat """
                        echo ========================================= > ${REPORTS_DIR}\\RESUMEN.txt
                        echo    PRESTABANCO - REPORTE DE SEGURIDAD    >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo ========================================= >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo. >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo Fecha: %date% %time% >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo Build: ${BUILD_NUMBER} >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo Pipeline: ${JOB_NAME} >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo. >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo SERVICIOS VERIFICADOS: >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo   Frontend:  ${env.FRONTEND_OK == 'true' ? 'SI' : 'NO'} >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo   Backend:   ${env.BACKEND_OK == 'true' ? 'SI' : 'NO'} >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo   Database:  ${env.DATABASE_OK == 'true' ? 'SI' : 'NO'} >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo. >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo ARCHIVOS GENERADOS: >> ${REPORTS_DIR}\\RESUMEN.txt
                    """
                    
                    // Listar archivos existentes
                    try {
                        bat 'dir /b ' + "${REPORTS_DIR} >> ${REPORTS_DIR}\\RESUMEN.txt"
                        
                        bat """
                            echo. >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo COMO REVISAR REPORTES: >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo   1. Leer este archivo RESUMEN.txt primero >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo   2. Abrir archivos .html en navegador >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo   3. Revisar archivos .txt en editor >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo. >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo NOTAS IMPORTANTES: >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo   - Error 403 en backend es normal (Spring Security) >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo   - ZAP puede escanear servicios con 403 >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo   - Exit code 2 significa warnings, no errores >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo. >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo SCAN COMPLETADO >> ${REPORTS_DIR}\\RESUMEN.txt
                        """
                    } catch (Exception e) {
                        echo "Could not list files: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                archiveArtifacts artifacts: "${REPORTS_DIR}/**", allowEmptyArchive: true
                
                echo """
                ====================================
                   PRESTABANCO SECURITY SCAN
                ====================================
                Reportes: ${BUILD_URL}artifact/${REPORTS_DIR}/
                
                Archivos principales:
                   - RESUMEN.txt (empezar aqui)
                   - frontend-scan.html 
                   - backend-scan.html
                   - database-scan.txt
                
                Servicios: 
                   Frontend: ${env.FRONTEND_OK == 'true' ? 'OK' : 'FAILED'}
                   Backend:  ${env.BACKEND_OK == 'true' ? 'OK' : 'FAILED'}  
                   Database: ${env.DATABASE_OK == 'true' ? 'OK' : 'FAILED'}
                
                Nota: Error 403 en backend es NORMAL
                ====================================
                """
            }
        }
        success {
            echo "Security scan completado exitosamente!"
        }
        unstable {
            echo "Scan completado con warnings - revisar reportes"
        }
        failure {
            echo "Scan fallo - revisar logs"
        }
    }
}