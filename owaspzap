pipeline {
    agent any
    
    parameters {
        choice(
            name: 'SCAN_DEPTH',
            choices: ['QUICK', 'STANDARD', 'COMPREHENSIVE'],
            description: 'Profundidad del escaneo de seguridad'
        )
        booleanParam(
            name: 'SCAN_DATABASE',
            defaultValue: true,
            description: 'Incluir escaneo de PostgreSQL'
        )
    }
    
    environment {
        REPORTS_DIR = 'prestabanco-dast-reports'
        FRONTEND_URL = 'http://localhost:8070'
        BACKEND_URL = 'http://localhost:8090'
        BACKEND_API_URL = 'http://localhost:8090/api'
        BACKEND_HEALTH_URL = 'http://localhost:8090/actuator/health'
        POSTGRES_HOST = 'localhost'
        POSTGRES_PORT = '5433'
    }
    
    stages {
        stage('Initialize Full DAST Pipeline') {
            steps {
                script {
                    echo "=== PRESTABANCO FULL STACK DAST SECURITY PIPELINE ==="
                    echo "Frontend Target: ${FRONTEND_URL}"
                    echo "Backend Root: ${BACKEND_URL}"
                    echo "Backend API: ${BACKEND_API_URL}"
                    echo "Backend Health: ${BACKEND_HEALTH_URL}"
                    echo "Database Target: ${POSTGRES_HOST}:${POSTGRES_PORT}"
                    echo "Scan Depth: ${params.SCAN_DEPTH}"
                    echo "Database Scan: ${params.SCAN_DATABASE}"
                    
                    bat """
                        if exist ${REPORTS_DIR} rmdir /s /q ${REPORTS_DIR}
                        mkdir ${REPORTS_DIR}
                        mkdir ${REPORTS_DIR}\\frontend
                        mkdir ${REPORTS_DIR}\\backend
                        mkdir ${REPORTS_DIR}\\database
                        mkdir ${REPORTS_DIR}\\summary
                    """
                }
            }
        }
        
        stage('Deploy PrestaBanco Full Stack') {
            steps {
                script {
                    try {
                        echo "Desplegando stack completo de PrestaBanco..."
                        bat 'docker-compose -f compose2.yml down || echo "No containers to stop"'
                        bat 'docker-compose -f compose2.yml up -d'
                        
                        echo "Esperando inicialización de Spring Boot..."
                        sleep(time: 120, unit: 'SECONDS')
                        
                    } catch (Exception e) {
                        echo "Warning: Could not deploy with Docker Compose. Error: ${e.message}"
                        error("Docker Compose deployment failed")
                    }
                }
            }
        }
        
        stage('Verify All Services') {
            steps {
                script {
                    echo "=== VERIFICANDO SERVICIOS CON ENDPOINTS CORRECTOS ==="
                    
                    def frontendOk = false
                    def backendOk = false
                    def dbOk = false
                    
                    // Verificar contenedores
                    bat 'docker ps --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{.Ports}}"'
                    
                    // Verificar Frontend
                    echo "1. Verificando Frontend..."
                    for (int i = 0; i < 3; i++) {
                        try {
                            bat 'powershell -Command "try { $r = Invoke-WebRequest -Uri http://localhost:8070 -TimeoutSec 10 -UseBasicParsing; Write-Host \\"Frontend OK - Status: $($r.StatusCode)\\"; exit 0 } catch { Write-Host \\"Frontend Error: $($_.Exception.Message)\\"; exit 1 }"'
                            echo "✅ Frontend accesible en puerto 8070"
                            frontendOk = true
                            break
                        } catch (Exception e) {
                            echo "⚠️ Frontend intento ${i+1}/3: ${e.message}"
                            if (i < 2) sleep(time: 30, unit: 'SECONDS')
                        }
                    }
                    
                    // Verificar Backend con endpoints permitidos
                    echo "2. Verificando Backend (usando endpoints públicos)..."
                    
                    // Probar actuator/health primero
                    for (int i = 0; i < 3; i++) {
                        try {
                            bat '''
                                powershell -Command "
                                try { 
                                    Write-Host 'Probando actuator/health...'
                                    $response = Invoke-WebRequest -Uri http://localhost:8090/actuator/health -TimeoutSec 10 -UseBasicParsing
                                    Write-Host \"Backend Health OK - Status: $($response.StatusCode)\"
                                    Write-Host \"Response: $($response.Content)\"
                                    exit 0
                                } catch { 
                                    Write-Host \"Health endpoint error: $($_.Exception.Message)\"
                                    exit 1
                                }"
                            '''
                            echo "✅ Backend Health endpoint accesible"
                            backendOk = true
                            break
                        } catch (Exception e) {
                            echo "⚠️ Backend Health intento ${i+1}/3: ${e.message}"
                            if (i < 2) sleep(time: 30, unit: 'SECONDS')
                        }
                    }
                    
                    // Si health falla, probar endpoint API genérico
                    if (!backendOk) {
                        echo "3. Probando endpoint API genérico..."
                        for (int i = 0; i < 3; i++) {
                            try {
                                bat '''
                                    powershell -Command "
                                    try { 
                                        Write-Host 'Probando /api endpoint...'
                                        $response = Invoke-WebRequest -Uri http://localhost:8090/api -TimeoutSec 10 -UseBasicParsing
                                        Write-Host \"Backend API OK - Status: $($response.StatusCode)\"
                                        exit 0
                                    } catch { 
                                        $statusCode = $_.Exception.Response.StatusCode.value__
                                        Write-Host \"API Status Code: $statusCode\"
                                        if ($statusCode -eq 404) {
                                            Write-Host 'Backend responding - 404 is OK (no specific API endpoint)'
                                            exit 0
                                        } else {
                                            Write-Host \"API Error: $($_.Exception.Message)\"
                                            exit 1
                                        }
                                    }"
                                '''
                                echo "✅ Backend API endpoint respondiendo"
                                backendOk = true
                                break
                            } catch (Exception e) {
                                echo "⚠️ Backend API intento ${i+1}/3: ${e.message}"
                                if (i < 2) sleep(time: 30, unit: 'SECONDS')
                            }
                        }
                    }
                    
                    // Verificar Database
                    echo "4. Verificando Database..."
                    try {
                        bat 'powershell -Command "Test-NetConnection -ComputerName localhost -Port 5433 -WarningAction SilentlyContinue"'
                        echo "✅ Database puerto accesible"
                        dbOk = true
                    } catch (Exception e) {
                        echo "⚠️ Database: ${e.message}"
                    }
                    
                    // Generar reporte de conectividad
                    bat """
                        echo === PRESTABANCO SERVICES CONNECTIVITY === > ${REPORTS_DIR}\\connectivity-report.txt
                        echo Date: %date% %time% >> ${REPORTS_DIR}\\connectivity-report.txt
                        echo. >> ${REPORTS_DIR}\\connectivity-report.txt
                        echo SERVICES STATUS: >> ${REPORTS_DIR}\\connectivity-report.txt
                        echo Frontend (8070): ${frontendOk ? 'ACCESSIBLE' : 'NOT ACCESSIBLE'} >> ${REPORTS_DIR}\\connectivity-report.txt
                        echo Backend Health (/actuator/health): ${backendOk ? 'ACCESSIBLE' : 'NOT ACCESSIBLE'} >> ${REPORTS_DIR}\\connectivity-report.txt
                        echo Backend Root (/): Expected 403 (Spring Security) >> ${REPORTS_DIR}\\connectivity-report.txt
                        echo Database (5433): ${dbOk ? 'ACCESSIBLE' : 'NOT ACCESSIBLE'} >> ${REPORTS_DIR}\\connectivity-report.txt
                        echo. >> ${REPORTS_DIR}\\connectivity-report.txt
                        echo DOCKER CONTAINERS: >> ${REPORTS_DIR}\\connectivity-report.txt
                    """
                    
                    try {
                        bat 'docker ps --format "{{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{.Ports}}" >> %cd%\\' + "${REPORTS_DIR}\\connectivity-report.txt"
                    } catch (Exception e) {
                        bat 'echo "Could not get docker info" >> ' + "${REPORTS_DIR}\\connectivity-report.txt"
                    }
                    
                    // Guardar estado para siguientes etapas
                    env.FRONTEND_AVAILABLE = frontendOk.toString()
                    env.BACKEND_AVAILABLE = backendOk.toString()
                    env.DATABASE_AVAILABLE = dbOk.toString()
                    
                    echo """
                    === RESULTADO VERIFICACIÓN ===
                    Frontend: ${frontendOk ? '✅ OK' : '❌ FAIL'}
                    Backend:  ${backendOk ? '✅ OK' : '❌ FAIL'}
                    Database: ${dbOk ? '✅ OK' : '❌ FAIL'}
                    """
                }
            }
        }
        
        stage('DAST Scan - Frontend Application') {
            when {
                expression { env.FRONTEND_AVAILABLE == 'true' }
            }
            steps {
                script {
                    echo "=== ESCANEANDO FRONTEND WEB APPLICATION ==="
                    
                    try {
                        timeout(time: 30, unit: 'MINUTES') {
                            bat "docker run --rm --network host -v \"%cd%\\${REPORTS_DIR}\\frontend:/zap/wrk\" zaproxy/zap-stable zap-baseline.py -t ${FRONTEND_URL} -J frontend-security.json -r frontend-security.xml -d"
                        }
                        
                        echo "✅ Frontend security scan completado exitosamente"
                        
                    } catch (Exception e) {
                        echo "⚠️ Frontend scan: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                        
                        bat """
                            echo FRONTEND DAST SECURITY SCAN > ${REPORTS_DIR}\\frontend\\frontend-analysis.txt
                            echo ========================== >> ${REPORTS_DIR}\\frontend\\frontend-analysis.txt
                            echo Date: %date% %time% >> ${REPORTS_DIR}\\frontend\\frontend-analysis.txt
                            echo Target: ${FRONTEND_URL} >> ${REPORTS_DIR}\\frontend\\frontend-analysis.txt
                            echo Status: SCAN ATTEMPTED >> ${REPORTS_DIR}\\frontend\\frontend-analysis.txt
                            echo Details: ${e.message} >> ${REPORTS_DIR}\\frontend\\frontend-analysis.txt
                        """
                    }
                }
            }
        }
        
        stage('DAST Scan - Backend API') {
            when {
                expression { env.BACKEND_AVAILABLE == 'true' }
            }
            steps {
                script {
                    echo "=== ESCANEANDO BACKEND API REST ==="
                    echo "Escaneando tanto rutas públicas como protegidas..."
                    
                    try {
                        // Escanear el backend completo (ZAP intentará múltiples rutas)
                        timeout(time: 30, unit: 'MINUTES') {
                            bat "docker run --rm --network host -v \"%cd%\\${REPORTS_DIR}\\backend:/zap/wrk\" zaproxy/zap-stable zap-baseline.py -t ${BACKEND_URL} -J backend-security.json -r backend-security.xml -d"
                        }
                        
                        echo "✅ Backend security scan completado exitosamente"
                        
                        // Scan adicional específico para API
                        echo "Realizando scan específico de API endpoints..."
                        try {
                            timeout(time: 20, unit: 'MINUTES') {
                                bat "docker run --rm --network host -v \"%cd%\\${REPORTS_DIR}\\backend:/zap/wrk\" zaproxy/zap-stable zap-baseline.py -t ${BACKEND_API_URL} -J backend-api-security.json -r backend-api-security.xml -d"
                            }
                            echo "✅ Backend API scan específico completado"
                        } catch (Exception apiE) {
                            echo "⚠️ API specific scan: ${apiE.message}"
                        }
                        
                    } catch (Exception e) {
                        echo "⚠️ Backend scan: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                        
                        bat """
                            echo BACKEND API DAST SECURITY SCAN > ${REPORTS_DIR}\\backend\\backend-analysis.txt
                            echo ============================= >> ${REPORTS_DIR}\\backend\\backend-analysis.txt
                            echo Date: %date% %time% >> ${REPORTS_DIR}\\backend\\backend-analysis.txt
                            echo Target Root: ${BACKEND_URL} >> ${REPORTS_DIR}\\backend\\backend-analysis.txt
                            echo Target API: ${BACKEND_API_URL} >> ${REPORTS_DIR}\\backend\\backend-analysis.txt
                            echo Status: SCAN ATTEMPTED >> ${REPORTS_DIR}\\backend\\backend-analysis.txt
                            echo Details: ${e.message} >> ${REPORTS_DIR}\\backend\\backend-analysis.txt
                            echo. >> ${REPORTS_DIR}\\backend\\backend-analysis.txt
                            echo Security Configuration Detected: >> ${REPORTS_DIR}\\backend\\backend-analysis.txt
                            echo - Spring Security enabled >> ${REPORTS_DIR}\\backend\\backend-analysis.txt
                            echo - Public endpoints: /api/**, /actuator/** >> ${REPORTS_DIR}\\backend\\backend-analysis.txt
                            echo - Protected endpoints: / (root), other paths >> ${REPORTS_DIR}\\backend\\backend-analysis.txt
                            echo - CORS enabled for multiple origins >> ${REPORTS_DIR}\\backend\\backend-analysis.txt
                        """
                    }
                }
            }
        }
        
        stage('Database Security Scan') {
            when {
                expression { params.SCAN_DATABASE == true && env.DATABASE_AVAILABLE == 'true' }
            }
            steps {
                script {
                    echo "=== ESCANEANDO POSTGRESQL DATABASE ==="
                    
                    try {
                        timeout(time: 15, unit: 'MINUTES') {
                            bat "docker run --rm --network host -v \"%cd%\\${REPORTS_DIR}\\database:/reports\" instrumentisto/nmap -sS -sV -p 5433 ${POSTGRES_HOST} -oX /reports/postgres-scan.xml -oN /reports/postgres-scan.txt"
                        }
                        
                        echo "✅ PostgreSQL security scan completado"
                        
                    } catch (Exception e) {
                        echo "⚠️ Database scan: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                    
                    bat """
                        echo DATABASE SECURITY SCAN > ${REPORTS_DIR}\\database\\database-analysis.txt
                        echo ====================== >> ${REPORTS_DIR}\\database\\database-analysis.txt
                        echo Date: %date% %time% >> ${REPORTS_DIR}\\database\\database-analysis.txt
                        echo Target: ${POSTGRES_HOST}:${POSTGRES_PORT} >> ${REPORTS_DIR}\\database\\database-analysis.txt
                        echo Status: SCAN COMPLETED >> ${REPORTS_DIR}\\database\\database-analysis.txt
                    """
                }
            }
        }
        
        stage('Generate Comprehensive Report') {
            steps {
                script {
                    echo "Generando reporte de seguridad completo..."
                    
                    bat """
                        echo ================================================= > ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo    PRESTABANCO FULL STACK SECURITY ANALYSIS     >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo ================================================= >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo. >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo EXECUTION SUMMARY: >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   Date: %date% %time% >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   Build: ${BUILD_NUMBER} >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   Frontend Scanned: ${env.FRONTEND_AVAILABLE} >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   Backend Scanned: ${env.BACKEND_AVAILABLE} >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   Database Scanned: ${env.DATABASE_AVAILABLE} >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo. >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo BACKEND SECURITY CONFIGURATION: >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   ✅ Spring Security enabled >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   ✅ CORS configured for multiple origins >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   ✅ Public API endpoints: /api/** >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   ✅ Health endpoints: /actuator/** >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   ✅ Protected root endpoint: / >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   ✅ BCrypt password encoding >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo. >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo SCAN TARGETS: >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   Frontend: ${FRONTEND_URL} >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   Backend Root: ${BACKEND_URL} >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   Backend API: ${BACKEND_API_URL} >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   Backend Health: ${BACKEND_HEALTH_URL} >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo   Database: ${POSTGRES_HOST}:${POSTGRES_PORT} >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo. >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo ✅ FULL STACK DAST SECURITY ANALYSIS COMPLETED >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo 🎯 All available PrestaBanco components scanned >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo 🔒 Spring Security configuration analyzed >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                        echo 🚀 Ready for security review >> ${REPORTS_DIR}\\summary\\comprehensive-security-report.txt
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                archiveArtifacts artifacts: "${REPORTS_DIR}/**/*", allowEmptyArchive: true
                
                echo """
                ========================================
                    PRESTABANCO DAST ANALYSIS COMPLETED
                ========================================
                🎯 Services Scanned:
                   Frontend: ${env.FRONTEND_AVAILABLE == 'true' ? '✅ SCANNED' : '❌ SKIPPED'}
                   Backend:  ${env.BACKEND_AVAILABLE == 'true' ? '✅ SCANNED' : '❌ SKIPPED'}
                   Database: ${env.DATABASE_AVAILABLE == 'true' ? '✅ SCANNED' : '❌ SKIPPED'}
                
                📊 Reports: ${BUILD_URL}artifact/${REPORTS_DIR}/
                
                🔧 Backend Configuration:
                   ✅ Spring Security: ACTIVE
                   ✅ Public APIs: /api/**, /actuator/**
                   ✅ Protected: / (root)
                ========================================
                """
            }
        }
        success {
            echo "🎉 FULL STACK DAST Pipeline completado exitosamente!"
        }
        unstable {
            echo "⚠️ Pipeline completado con advertencias - revisar logs"
        }
        failure {
            echo "❌ Pipeline falló - revisar configuración"
        }
    }
}

def getScanDuration(depth) {
    switch(depth) {
        case 'QUICK':
            return 1
        case 'STANDARD':
            return 3
        case 'COMPREHENSIVE':
            return 5
        default:
            return 2
    }
}