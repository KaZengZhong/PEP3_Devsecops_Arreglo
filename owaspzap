pipeline {
    agent any
    
    parameters {
        choice(
            name: 'SCAN_TYPE',
            choices: ['BASELINE', 'API_SCAN'],
            description: 'Tipo de escaneo DAST'
        )
    }
    
    environment {
        REPORTS_DIR = 'dast-reports'
        APP_URL = 'http://localhost:8070'
        API_URL = 'http://localhost:8090'
    }
    
    stages {
        stage('üöÄ Initialize') {
            steps {
                script {
                    echo "=== PIPELINE DAST PRESTABANCO ==="
                    echo "Scan Type: ${params.SCAN_TYPE}"
                    
                    bat """
                        if exist ${REPORTS_DIR} rmdir /s /q ${REPORTS_DIR}
                        mkdir ${REPORTS_DIR}
                    """
                }
            }
        }
        
        stage('üê≥ Deploy with Docker Compose') {
            steps {
                script {
                    try {
                        bat 'dir'
                        bat 'docker-compose -f compose2.yml up -d'
                        
                        echo "Esperando que los servicios inicien..."
                        sleep(time: 90, unit: 'SECONDS')
                        
                    } catch (Exception e) {
                        echo "Warning: Could not deploy with Docker Compose. Error: ${e.message}"
                        error("Docker Compose deployment failed")
                    }
                }
            }
        }
        
        stage('üîç Verify Services') {
            steps {
                script {
                    echo "Verificando servicios desplegados..."
                    
                    // Verificar contenedores
                    bat 'docker ps'
                    
                    // Test b√°sico de conectividad (sin -f para evitar exit codes)
                    try {
                        bat 'curl -s http://localhost:8070 > nul'
                        echo "‚úÖ Frontend accessible"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Frontend check: ${e.message}"
                    }
                    
                    try {
                        bat 'curl -s http://localhost:8090 > nul'
                        echo "‚úÖ Backend accessible"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Backend check: ${e.message}"
                    }
                    
                    // Verificar puertos abiertos
                    try {
                        bat 'netstat -an | findstr :8070'
                        bat 'netstat -an | findstr :8090'
                        echo "‚úÖ Puertos verificados"
                    } catch (Exception e) {
                        echo "Info: ${e.message}"
                    }
                }
            }
        }
        
        stage('üéØ OWASP ZAP Scan') {
            steps {
                script {
                    if (params.SCAN_TYPE == 'BASELINE') {
                        echo "Ejecutando ZAP Baseline Scan..."
                        
                        try {
                            bat """
                                docker run --rm ^
                                    -v "%cd%\\${REPORTS_DIR}:/zap/wrk" ^
                                    zaproxy/zap-stable ^
                                    zap-baseline.py ^
                                    -t ${APP_URL} ^
                                    -J baseline-report.json ^
                                    -H baseline-report.html
                            """
                            echo "‚úÖ ZAP Baseline completado"
                        } catch (Exception e) {
                            echo "ZAP scan warning: ${e.message}"
                            
                            // Crear reporte manual si ZAP falla
                            bat """
                                echo ZAP BASELINE SCAN REPORT > ${REPORTS_DIR}\\manual-baseline-report.txt
                                echo ========================== >> ${REPORTS_DIR}\\manual-baseline-report.txt
                                echo Date: %date% %time% >> ${REPORTS_DIR}\\manual-baseline-report.txt
                                echo Target: ${APP_URL} >> ${REPORTS_DIR}\\manual-baseline-report.txt
                                echo Status: Scan attempted - check Docker and ZAP availability >> ${REPORTS_DIR}\\manual-baseline-report.txt
                                echo Note: Application was deployed and accessible >> ${REPORTS_DIR}\\manual-baseline-report.txt
                            """
                        }
                        
                    } else {
                        echo "Ejecutando ZAP API Scan..."
                        
                        try {
                            bat """
                                docker run --rm ^
                                    -v "%cd%\\${REPORTS_DIR}:/zap/wrk" ^
                                    zaproxy/zap-stable ^
                                    zap-api-scan.py ^
                                    -t ${API_URL} ^
                                    -J api-report.json ^
                                    -H api-report.html
                            """
                            echo "‚úÖ ZAP API scan completado"
                        } catch (Exception e) {
                            echo "ZAP API scan warning: ${e.message}"
                            
                            // Crear reporte manual
                            bat """
                                echo ZAP API SCAN REPORT > ${REPORTS_DIR}\\manual-api-report.txt
                                echo ================== >> ${REPORTS_DIR}\\manual-api-report.txt
                                echo Date: %date% %time% >> ${REPORTS_DIR}\\manual-api-report.txt
                                echo Target: ${API_URL} >> ${REPORTS_DIR}\\manual-api-report.txt
                                echo Status: Scan attempted - API endpoints analysis >> ${REPORTS_DIR}\\manual-api-report.txt
                            """
                        }
                    }
                }
            }
        }
        
        stage('üìä Generate Summary') {
            steps {
                script {
                    bat """
                        echo PRESTABANCO DAST SECURITY SCAN > ${REPORTS_DIR}\\summary.txt
                        echo =============================== >> ${REPORTS_DIR}\\summary.txt
                        echo Date: %date% %time% >> ${REPORTS_DIR}\\summary.txt
                        echo Scan Type: ${params.SCAN_TYPE} >> ${REPORTS_DIR}\\summary.txt
                        echo Target Frontend: ${APP_URL} >> ${REPORTS_DIR}\\summary.txt
                        echo Target Backend: ${API_URL} >> ${REPORTS_DIR}\\summary.txt
                        echo Build: ${BUILD_NUMBER} >> ${REPORTS_DIR}\\summary.txt
                        echo. >> ${REPORTS_DIR}\\summary.txt
                        echo Generated Files: >> ${REPORTS_DIR}\\summary.txt
                        dir ${REPORTS_DIR} >> ${REPORTS_DIR}\\summary.txt
                        echo. >> ${REPORTS_DIR}\\summary.txt
                        echo ‚úÖ DAST Analysis Completed >> ${REPORTS_DIR}\\summary.txt
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                archiveArtifacts artifacts: "${REPORTS_DIR}/**/*", allowEmptyArchive: true
                
                echo "Limpiando Docker Compose..."
                try {
                    bat 'docker-compose -f compose2.yml down'
                    echo "‚úÖ Cleanup exitoso"
                } catch (Exception e) {
                    echo "Warning: Could not clean up Docker Compose. Error: ${e.message}"
                }
                
                echo "‚úÖ Pipeline DAST completado"
            }
        }
        success {
            echo "üéâ DAST pipeline successful!"
        }
        failure {
            echo "‚ùå DAST pipeline failed"
        }
    }
}