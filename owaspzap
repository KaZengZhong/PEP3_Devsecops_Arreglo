pipeline {
    agent any
    
    parameters {
        choice(
            name: 'SCAN_DEPTH',
            choices: ['QUICK', 'STANDARD', 'COMPREHENSIVE'],
            description: 'Profundidad del escaneo de seguridad'
        )
        booleanParam(
            name: 'SCAN_DATABASE',
            defaultValue: true,
            description: 'Incluir escaneo de PostgreSQL'
        )
    }
    
    environment {
        REPORTS_DIR = 'security-reports'
        FRONTEND_URL = 'http://localhost:8070'
        BACKEND_URL = 'http://localhost:8090'
        BACKEND_HEALTH_URL = 'http://localhost:8090/actuator/health'
        POSTGRES_HOST = 'localhost'
        POSTGRES_PORT = '5433'
    }
    
    stages {
        stage('Initialize DAST Pipeline') {
            steps {
                script {
                    echo "=== PRESTABANCO SECURITY SCAN ==="
                    echo "Frontend: ${FRONTEND_URL}"
                    echo "Backend: ${BACKEND_URL}"
                    echo "Database: ${POSTGRES_HOST}:${POSTGRES_PORT}"
                    
                    // Solo crear carpeta principal
                    bat """
                        if exist ${REPORTS_DIR} rmdir /s /q ${REPORTS_DIR}
                        mkdir ${REPORTS_DIR}
                    """
                }
            }
        }
        
        stage('Deploy Services') {
            steps {
                script {
                    echo "Desplegando servicios..."
                    bat 'docker-compose -f compose2.yml down || echo "No containers to stop"'
                    bat 'docker-compose -f compose2.yml up -d'
                    
                    echo "Esperando inicialización..."
                    sleep(time: 90, unit: 'SECONDS')
                }
            }
        }
        
        stage('Verify Services') {
            steps {
                script {
                    echo "Verificando servicios..."
                    
                    def frontendOk = false
                    def backendOk = false
                    def dbOk = false
                    
                    // Frontend
                    try {
                        bat 'powershell -Command "Invoke-WebRequest -Uri http://localhost:8070 -TimeoutSec 10 -UseBasicParsing | Out-Null"'
                        frontendOk = true
                        echo "✅ Frontend OK"
                    } catch (Exception e) {
                        echo "❌ Frontend: ${e.message}"
                    }
                    
                    // Backend (usando health endpoint)
                    try {
                        bat 'powershell -Command "Invoke-WebRequest -Uri http://localhost:8090/actuator/health -TimeoutSec 10 -UseBasicParsing | Out-Null"'
                        backendOk = true
                        echo "✅ Backend OK"
                    } catch (Exception e) {
                        echo "⚠️ Backend health failed, probando root..."
                        try {
                            // Si health falla, probar root (403 es OK)
                            bat '''powershell -Command "
                                try { 
                                    Invoke-WebRequest -Uri http://localhost:8090 -TimeoutSec 10 -UseBasicParsing
                                } catch { 
                                    if ($_.Exception.Response.StatusCode.value__ -eq 403) {
                                        Write-Host 'Backend OK (403 expected)'
                                        exit 0
                                    } else { exit 1 }
                                }"'''
                            backendOk = true
                            echo "✅ Backend OK (Spring Security active)"
                        } catch (Exception e2) {
                            echo "❌ Backend: ${e2.message}"
                        }
                    }
                    
                    // Database
                    try {
                        bat 'powershell -Command "Test-NetConnection -ComputerName localhost -Port 5433 -WarningAction SilentlyContinue"'
                        dbOk = true
                        echo "✅ Database OK"
                    } catch (Exception e) {
                        echo "❌ Database: ${e.message}"
                    }
                    
                    env.FRONTEND_OK = frontendOk.toString()
                    env.BACKEND_OK = backendOk.toString()
                    env.DATABASE_OK = dbOk.toString()
                }
            }
        }
        
        stage('Security Scan - Frontend') {
            when { expression { env.FRONTEND_OK == 'true' } }
            steps {
                script {
                    echo "🔍 Escaneando Frontend..."
                    try {
                        timeout(time: 20, unit: 'MINUTES') {
                            bat "docker run --rm --network host -v \"%cd%\\${REPORTS_DIR}:/zap/wrk\" zaproxy/zap-stable zap-baseline.py -t ${FRONTEND_URL} -J frontend-scan.json -r frontend-scan.html -d"
                        }
                        echo "✅ Frontend scan completado"
                    } catch (Exception e) {
                        echo "⚠️ Frontend scan: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Security Scan - Backend') {
            when { expression { env.BACKEND_OK == 'true' } }
            steps {
                script {
                    echo "🔍 Escaneando Backend..."
                    try {
                        timeout(time: 20, unit: 'MINUTES') {
                            bat "docker run --rm --network host -v \"%cd%\\${REPORTS_DIR}:/zap/wrk\" zaproxy/zap-stable zap-baseline.py -t ${BACKEND_URL} -J backend-scan.json -r backend-scan.html -d"
                        }
                        echo "✅ Backend scan completado"
                    } catch (Exception e) {
                        echo "⚠️ Backend scan: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Security Scan - Database') {
            when { 
                allOf {
                    expression { params.SCAN_DATABASE == true }
                    expression { env.DATABASE_OK == 'true' }
                }
            }
            steps {
                script {
                    echo "🔍 Escaneando Database..."
                    try {
                        timeout(time: 10, unit: 'MINUTES') {
                            bat "docker run --rm --network host -v \"%cd%\\${REPORTS_DIR}:/reports\" instrumentisto/nmap -sS -sV -p 5433 ${POSTGRES_HOST} -oN /reports/database-scan.txt"
                        }
                        echo "✅ Database scan completado"
                    } catch (Exception e) {
                        echo "⚠️ Database scan: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Generate Summary') {
            steps {
                script {
                    echo "📋 Generando resumen..."
                    
                    bat """
                        echo ========================================= > ${REPORTS_DIR}\\RESUMEN.txt
                        echo    PRESTABANCO - REPORTE DE SEGURIDAD    >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo ========================================= >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo. >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo Fecha: %date% %time% >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo Build: ${BUILD_NUMBER} >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo. >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo SERVICIOS ESCANEADOS: >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo   Frontend:  ${env.FRONTEND_OK == 'true' ? 'SI' : 'NO'} >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo   Backend:   ${env.BACKEND_OK == 'true' ? 'SI' : 'NO'} >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo   Database:  ${env.DATABASE_OK == 'true' ? 'SI' : 'NO'} >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo. >> ${REPORTS_DIR}\\RESUMEN.txt
                        echo ARCHIVOS GENERADOS: >> ${REPORTS_DIR}\\RESUMEN.txt
                    """
                    
                    // Listar solo archivos que existen
                    try {
                        bat 'if exist ' + "${REPORTS_DIR}\\frontend-scan.json" + ' echo   ✅ frontend-scan.json >> ' + "${REPORTS_DIR}\\RESUMEN.txt"
                        bat 'if exist ' + "${REPORTS_DIR}\\frontend-scan.html" + ' echo   ✅ frontend-scan.html >> ' + "${REPORTS_DIR}\\RESUMEN.txt"
                        bat 'if exist ' + "${REPORTS_DIR}\\backend-scan.json" + ' echo   ✅ backend-scan.json >> ' + "${REPORTS_DIR}\\RESUMEN.txt"
                        bat 'if exist ' + "${REPORTS_DIR}\\backend-scan.html" + ' echo   ✅ backend-scan.html >> ' + "${REPORTS_DIR}\\RESUMEN.txt"
                        bat 'if exist ' + "${REPORTS_DIR}\\database-scan.txt" + ' echo   ✅ database-scan.txt >> ' + "${REPORTS_DIR}\\RESUMEN.txt"
                        
                        bat """
                            echo. >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo 📋 COMO LEER LOS REPORTES: >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo   1. Abrir frontend-scan.html en navegador >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo   2. Abrir backend-scan.html en navegador >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo   3. Revisar database-scan.txt en editor >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo. >> ${REPORTS_DIR}\\RESUMEN.txt
                            echo ✅ SCAN COMPLETADO >> ${REPORTS_DIR}\\RESUMEN.txt
                        """
                    } catch (Exception e) {
                        echo "Could not list files: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Solo archivar la carpeta de reportes
                archiveArtifacts artifacts: "${REPORTS_DIR}/**", allowEmptyArchive: true
                
                echo """
                ====================================
                   PRESTABANCO SECURITY SCAN
                ====================================
                📊 Reportes: ${BUILD_URL}artifact/${REPORTS_DIR}/
                
                📁 Archivos principales:
                   📄 RESUMEN.txt (empezar aquí)
                   🌐 frontend-scan.html 
                   🔧 backend-scan.html
                   🗄️ database-scan.txt
                
                🎯 Servicios: 
                   Frontend: ${env.FRONTEND_OK == 'true' ? '✅' : '❌'}
                   Backend:  ${env.BACKEND_OK == 'true' ? '✅' : '❌'}  
                   Database: ${env.DATABASE_OK == 'true' ? '✅' : '❌'}
                ====================================
                """
            }
        }
        success {
            echo "🎉 Security scan completado exitosamente!"
        }
        unstable {
            echo "⚠️ Scan completado con warnings - revisar reportes"
        }
        failure {
            echo "❌ Scan falló - revisar logs"
        }
    }
}