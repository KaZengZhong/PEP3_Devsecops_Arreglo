pipeline {
    agent any
    
    parameters {
        choice(
            name: 'SCAN_TYPE',
            choices: ['BASELINE', 'API_SCAN'],
            description: 'Tipo de escaneo DAST a ejecutar'
        )
    }
    
    environment {
        REPORTS_DIR = 'dast-reports'
        APP_URL = 'http://localhost:8070'
        API_URL = 'http://localhost:8090'
    }
    
    stages {
        stage('üöÄ Initialize DAST Pipeline') {
            steps {
                script {
                    echo "=== INICIANDO PIPELINE DAST PRESTABANCO ==="
                    echo "Tipo de escaneo: ${params.SCAN_TYPE}"
                    
                    bat """
                        if exist ${REPORTS_DIR} rmdir /s /q ${REPORTS_DIR}
                        mkdir ${REPORTS_DIR}
                    """
                }
            }
        }
        
        stage('üê≥ Deploy with Docker Compose') {
            steps {
                script {
                    echo "Desplegando PrestaBanco con Docker Compose..."
                    try {
                        bat 'dir'
                        bat 'docker-compose -f compose2.yml up -d'
                        
                        echo "‚úÖ Aplicaci√≥n desplegada exitosamente"
                        echo "Esperando que los servicios est√©n listos..."
                        sleep(time: 60, unit: 'SECONDS')
                        
                        // Health checks con retry
                        retry(3) {
                            try {
                                bat 'curl -f http://localhost:8070'
                                echo "‚úÖ Frontend respondiendo"
                            } catch (Exception e) {
                                echo "Reintentando conexi√≥n al frontend..."
                                sleep(time: 10, unit: 'SECONDS')
                                throw e
                            }
                        }
                        
                        retry(3) {
                            try {
                                bat 'curl -f http://localhost:8090/actuator/health'
                                echo "‚úÖ Backend respondiendo"
                            } catch (Exception e) {
                                echo "Reintentando conexi√≥n al backend..."
                                sleep(time: 10, unit: 'SECONDS')
                                throw e
                            }
                        }
                        
                    } catch (Exception e) {
                        echo "Warning: Could not deploy with Docker Compose. Error: ${e.message}"
                        error("Docker Compose deployment failed - cannot proceed with DAST")
                    }
                }
            }
        }
        
        stage('üéØ OWASP ZAP Security Scan') {
            steps {
                script {
                    if (params.SCAN_TYPE == 'BASELINE') {
                        echo "Ejecutando ZAP Baseline Scan contra Frontend..."
                        
                        try {
                            bat """
                                docker run --rm ^
                                    -v "%cd%\\${REPORTS_DIR}:/zap/wrk" ^
                                    zaproxy/zap-stable ^
                                    zap-baseline.py ^
                                    -t ${APP_URL} ^
                                    -J baseline-report.json ^
                                    -H baseline-report.html ^
                                    -r baseline-report.xml
                            """
                            echo "‚úÖ Baseline scan completado"
                        } catch (Exception e) {
                            echo "Warning: ZAP Baseline scan encountered issues: ${e.message}"
                            // Continuar el pipeline incluso si ZAP falla
                        }
                        
                    } else {
                        echo "Ejecutando ZAP API Scan contra Backend..."
                        
                        try {
                            bat """
                                docker run --rm ^
                                    -v "%cd%\\${REPORTS_DIR}:/zap/wrk" ^
                                    zaproxy/zap-stable ^
                                    zap-api-scan.py ^
                                    -t ${API_URL}/v3/api-docs ^
                                    -f openapi ^
                                    -J api-report.json ^
                                    -H api-report.html ^
                                    -r api-report.xml
                            """
                            echo "‚úÖ API scan completado"
                        } catch (Exception e) {
                            echo "Warning: ZAP API scan encountered issues: ${e.message}"
                            // Crear reporte manual si ZAP falla
                            bat """
                                echo ZAP API Scan - Manual Report > ${REPORTS_DIR}\\manual-api-report.txt
                                echo ================================= >> ${REPORTS_DIR}\\manual-api-report.txt
                                echo Target: ${API_URL} >> ${REPORTS_DIR}\\manual-api-report.txt
                                echo Status: Scan attempted but encountered issues >> ${REPORTS_DIR}\\manual-api-report.txt
                                echo Error: %e% >> ${REPORTS_DIR}\\manual-api-report.txt
                            """
                        }
                    }
                }
            }
        }
        
        stage('üìä Generate DAST Summary') {
            steps {
                script {
                    echo "Generando resumen DAST..."
                    
                    bat """
                        echo ===================================== > ${REPORTS_DIR}\\dast-summary.txt
                        echo    PRESTABANCO DAST SCAN RESULTS    >> ${REPORTS_DIR}\\dast-summary.txt
                        echo ===================================== >> ${REPORTS_DIR}\\dast-summary.txt
                        echo. >> ${REPORTS_DIR}\\dast-summary.txt
                        echo Fecha: %date% %time% >> ${REPORTS_DIR}\\dast-summary.txt
                        echo Tipo de Escaneo: ${params.SCAN_TYPE} >> ${REPORTS_DIR}\\dast-summary.txt
                        echo Target Frontend: ${APP_URL} >> ${REPORTS_DIR}\\dast-summary.txt
                        echo Target Backend: ${API_URL} >> ${REPORTS_DIR}\\dast-summary.txt
                        echo. >> ${REPORTS_DIR}\\dast-summary.txt
                        echo Herramienta: OWASP ZAP >> ${REPORTS_DIR}\\dast-summary.txt
                        echo Pipeline: ${BUILD_NUMBER} >> ${REPORTS_DIR}\\dast-summary.txt
                        echo. >> ${REPORTS_DIR}\\dast-summary.txt
                        echo Aplicaci√≥n Analizada: >> ${REPORTS_DIR}\\dast-summary.txt
                        echo   ‚Ä¢ Frontend: React/Angular ^(Puerto 8070^) >> ${REPORTS_DIR}\\dast-summary.txt
                        echo   ‚Ä¢ Backend: Spring Boot ^(Puerto 8090^) >> ${REPORTS_DIR}\\dast-summary.txt
                        echo   ‚Ä¢ Database: PostgreSQL ^(Puerto 5432^) >> ${REPORTS_DIR}\\dast-summary.txt
                        echo. >> ${REPORTS_DIR}\\dast-summary.txt
                        echo Archivos Generados: >> ${REPORTS_DIR}\\dast-summary.txt
                        dir ${REPORTS_DIR} >> ${REPORTS_DIR}\\dast-summary.txt
                        echo. >> ${REPORTS_DIR}\\dast-summary.txt
                        echo ‚úÖ An√°lisis DAST completado exitosamente! >> ${REPORTS_DIR}\\dast-summary.txt
                    """
                }
            }
        }
        
        stage('üîç Verify Reports') {
            steps {
                script {
                    echo "Verificando reportes generados..."
                    
                    try {
                        bat """
                            echo Contenido del directorio de reportes:
                            dir ${REPORTS_DIR}
                            echo.
                            echo Verificando archivos espec√≠ficos:
                            if exist ${REPORTS_DIR}\\*report.html echo ‚úÖ Reportes HTML encontrados
                            if exist ${REPORTS_DIR}\\*report.json echo ‚úÖ Reportes JSON encontrados
                            if exist ${REPORTS_DIR}\\dast-summary.txt echo ‚úÖ Resumen generado
                        """
                    } catch (Exception e) {
                        echo "Info: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Archivar todos los reportes
                archiveArtifacts artifacts: "${REPORTS_DIR}/**/*", allowEmptyArchive: true
                
                // Limpiar Docker Compose usando tu estilo
                echo "Limpiando entorno Docker Compose..."
                try {
                    bat 'docker-compose -f compose2.yml down'
                    echo "‚úÖ Docker Compose limpiado exitosamente"
                } catch (Exception e) {
                    echo "Warning: Could not clean up Docker Compose. Error: ${e.message}"
                }
                
                echo """
                ========================================
                    DAST PIPELINE COMPLETADO
                ========================================
                üìä Reportes archivados en: ${BUILD_URL}artifact/${REPORTS_DIR}/
                üéØ Tipo de scan: ${params.SCAN_TYPE}
                üìã Ver resumen: dast-summary.txt
                ========================================
                """
            }
        }
        success {
            echo "üéâ DAST Pipeline ejecutado exitosamente!"
        }
        failure {
            echo "‚ùå DAST Pipeline fall√≥ - revisar logs y configuraci√≥n"
        }
        unstable {
            echo "‚ö†Ô∏è DAST Pipeline inestable - vulnerabilidades encontradas"
        }
    }
}