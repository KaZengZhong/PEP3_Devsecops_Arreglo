pipeline {
    agent any
    
    environment {
        REPORTS_DIR = 'security-reports'
        COMPOSE_FILE = 'compose2.yml'
    }
    
    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }
        
        stage('Preparation') {
            steps {
                bat "if not exist ${env.REPORTS_DIR} mkdir ${env.REPORTS_DIR}"
                echo "=== PIPELINE DE SEGURIDAD OWASP ZAP ==="
                echo "üê≥ Desplegando aplicaciones autom√°ticamente"
                echo "üï∑Ô∏è An√°lisis din√°mico completo con OWASP ZAP"
            }
        }

        stage('Deploy Applications') {
            steps {
                echo "üê≥ Desplegando aplicaciones con Docker Compose..."
                
                bat '''
                    docker --version
                    docker-compose --version
                '''
                
                bat '''
                    if exist %COMPOSE_FILE% (
                        echo "‚úÖ Docker Compose file found: %COMPOSE_FILE%"
                    ) else (
                        echo "‚ùå Docker Compose file NOT found: %COMPOSE_FILE%"
                        exit 1
                    )
                '''
                
                bat '''
                    echo "üßπ Cleaning up previous containers..."
                    docker-compose -f %COMPOSE_FILE% down --remove-orphans || echo "No previous containers to remove"
                '''
                
                bat '''
                    echo "üöÄ Starting services with Docker Compose..."
                    docker-compose -f %COMPOSE_FILE% up -d
                '''
                
                bat '''
                    echo "üìä Checking container status..."
                    docker-compose -f %COMPOSE_FILE% ps
                '''
                
                echo "‚è≥ Services deployed, waiting for readiness..."
            }
        }
        
        stage('Wait for Applications Ready') {
            steps {
                echo "üîç Verificando que las aplicaciones est√©n listas..."
                
                bat '''
                    echo "Waiting for containers to be fully ready..."
                    ping localhost -n 31 > nul
                '''
                
                bat '''
                    echo "Checking container status..."
                    docker-compose -f %COMPOSE_FILE% ps
                '''
                
                script {
                    def frontendReady = false
                    for (int i = 0; i < 5; i++) {
                        def result = bat(script: 'curl -f http://localhost:8070', returnStatus: true)
                        if (result == 0) {
                            frontendReady = true
                            echo "‚úÖ Frontend is ready!"
                            break
                        } else {
                            echo "Frontend not ready yet, attempt ${i+1}/5"
                            bat 'ping localhost -n 11 > nul'
                        }
                    }
                    if (!frontendReady) {
                        echo "‚ö†Ô∏è Frontend not responding after 5 attempts"
                    }
                }
                
                script {
                    def backendReady = false
                    for (int i = 0; i < 5; i++) {
                        def result = bat(script: 'curl -f http://localhost:8090/actuator/health', returnStatus: true)
                        if (result == 0) {
                            backendReady = true
                            echo "‚úÖ Backend is ready!"
                            break
                        } else {
                            echo "Backend not ready yet, attempt ${i+1}/5"
                            bat 'ping localhost -n 11 > nul'
                        }
                    }
                    if (!backendReady) {
                        echo "‚ö†Ô∏è Backend not responding after 5 attempts"
                    }
                }
                
                echo "üîç Continuing with security scans..."
            }
        }

        stage('ZAP Baseline - Frontend') {
            steps {
                echo "üï∑Ô∏è OWASP ZAP - Baseline Scan Frontend..."
                
                bat '''
                    docker run --rm ^
                        -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                        --network host ^
                        -t zaproxy/zap-stable ^
                        zap-baseline.py ^
                        -t http://localhost:8070 ^
                        -J zap-frontend-baseline.json ^
                        -r zap-frontend-baseline.html ^
                        -x zap-frontend-baseline.xml ^
                        --auto
                    exit /b 0
                '''
            }
        }
        
        stage('ZAP Baseline - Backend') {
            steps {
                echo "üï∑Ô∏è OWASP ZAP - Baseline Scan Backend..."
                
                bat '''
                    docker run --rm ^
                        -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                        --network host ^
                        -t zaproxy/zap-stable ^
                        zap-baseline.py ^
                        -t http://localhost:8090 ^
                        -J zap-backend-baseline.json ^
                        -r zap-backend-baseline.html ^
                        -x zap-backend-baseline.xml ^
                        --auto
                    exit /b 0
                '''
            }
        }
        
        stage('ZAP API Scan') {
            steps {
                echo "üï∑Ô∏è OWASP ZAP - API Security Scan..."
                
                bat '''
                    docker run --rm ^
                        -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                        --network host ^
                        -t zaproxy/zap-stable ^
                        zap-api-scan.py ^
                        -t http://localhost:8090/v3/api-docs ^
                        -f openapi ^
                        -J zap-api-scan.json ^
                        -r zap-api-scan.html ^
                        -x zap-api-scan.xml || echo "API scan completed"
                    exit /b 0
                '''
            }
        }

        stage('Generate Security Summary') {
            steps {
                echo "üìä Generando resumen de vulnerabilidades..."
                
                bat '''
                    echo === RESUMEN DE SEGURIDAD OWASP ZAP === > "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo Fecha: %DATE% %TIME% >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo Pipeline: OWASP ZAP Security Scan >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo. >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo === SCANS EJECUTADOS === >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo ‚úÖ ZAP Baseline Frontend >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo ‚úÖ ZAP Baseline Backend >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo ‚úÖ ZAP API Scan Backend >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo. >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo === ARCHIVOS PRINCIPALES === >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo üìã SECURITY-SUMMARY.txt: Este archivo >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo üåê zap-frontend-baseline.html: Vulnerabilidades Frontend >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo üåê zap-backend-baseline.html: Vulnerabilidades Backend >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo üåê zap-api-scan.html: Vulnerabilidades API >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo. >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo === COMO REVISAR === >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo 1. Descarga los archivos .HTML >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo 2. Abre en navegador >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo 3. Busca seccion ALERTS >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                    echo 4. Prioriza: HIGH ^> MEDIUM ^> LOW >> "%REPORTS_DIR%/SECURITY-SUMMARY.txt"
                '''
                
                bat "dir %REPORTS_DIR%"
                
                echo "üìä Resumen generado: SECURITY-SUMMARY.txt"
            }
        }
    }
    
    post {
        always {
            echo "üßπ Limpiando recursos..."
            
            bat '''
                docker-compose -f %COMPOSE_FILE% down --remove-orphans || echo "Cleanup completed"
            '''
            
            echo "üìÅ Archivando reportes de seguridad OWASP ZAP..."
            archiveArtifacts artifacts: "${env.REPORTS_DIR}/**/*", allowEmptyArchive: true
            
            echo "üéØ PIPELINE OWASP ZAP COMPLETADO"
        }
        
        success {
            echo "‚úÖ Pipeline OWASP ZAP ejecutado exitosamente"
            echo "üîç Revisa SECURITY-SUMMARY.txt y los reportes HTML"
        }
        
        failure {
            echo "‚ùå Pipeline fall√≥ - revisar logs para detalles"
        }
    }
}