pipeline {
    agent any
    
    environment {
        REPORTS_DIR = 'security-reports'
        TIMESTAMP = "${new Date().format('yyyyMMdd-HHmmss')}"
        COMPOSE_FILE = 'compose2.yml'
    }
    
    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }
        
        stage('Preparation') {
            steps {
                script {
                    // Crear directorio para reportes
                    bat "if not exist %REPORTS_DIR% mkdir %REPORTS_DIR%"
                    
                    echo "=== PIPELINE DE SEGURIDAD CON DOCKER COMPOSE ==="
                    echo "üê≥ Desplegando aplicaciones autom√°ticamente"
                    echo "üìä An√°lisis est√°tico + din√°mico completo"
                }
            }
        }

        // ========== AN√ÅLISIS EST√ÅTICO ==========
        stage('Static Security Analysis') {
            parallel {
                stage('Snyk - Dependencies') {
                    steps {
                        script {
                            echo "üîç Analizando dependencias con Snyk..."
                            
                            bat '''
                                npx snyk test --json > "%REPORTS_DIR%/snyk-deps-%TIMESTAMP%.json" || echo "Snyk dependencies completed"
                                npx snyk test --severity-threshold=medium || echo "Medium+ vulnerabilities check completed"
                            '''
                        }
                    }
                }
                
                stage('Snyk - Code Analysis') {
                    steps {
                        script {
                            echo "üîç Analizando c√≥digo con Snyk..."
                            
                            bat '''
                                npx snyk code test --json > "%REPORTS_DIR%/snyk-code-%TIMESTAMP%.json" || echo "Snyk code scan completed"
                            '''
                        }
                    }
                }
                
                stage('OWASP Dependency Check') {
                    steps {
                        script {
                            echo "üîç OWASP Dependency Check..."
                            
                            bat '''
                                docker run --rm ^
                                    -v "%cd%:/src:ro" ^
                                    -v "%cd%\\%REPORTS_DIR%:/report:rw" ^
                                    owasp/dependency-check ^
                                    --scan /src ^
                                    --format ALL ^
                                    --out /report ^
                                    --project "prestabanco-static-%TIMESTAMP%"
                                exit /b 0
                            '''
                        }
                    }
                }
            }
        }

        // ========== DESPLIEGUE AUTOM√ÅTICO ==========
        stage('Deploy Applications') {
            steps {
                script {
                    echo "üê≥ Desplegando aplicaciones con Docker Compose..."
                    
                    // Limpiar contenedores anteriores
                    bat '''
                        docker-compose -f %COMPOSE_FILE% down --remove-orphans || echo "No previous containers to remove"
                    '''
                    
                    // Levantar servicios
                    bat '''
                        docker-compose -f %COMPOSE_FILE% up -d
                    '''
                    
                    echo "‚è≥ Esperando que los servicios est√©n listos..."
                }
            }
        }
        
        stage('Wait for Applications Ready') {
            steps {
                script {
                    echo "üîç Verificando que las aplicaciones est√©n listas..."
                    
                    // Esperar que los containers est√©n running
                    bat '''
                        timeout 30 > nul
                        echo "Waiting for containers to be fully ready..."
                    '''
                    
                    // Verificar frontend
                    retry(5) {
                        bat '''
                            curl -f http://localhost:8070 || (echo "Frontend not ready, retrying..." && timeout 10 > nul && exit 1)
                        '''
                    }
                    
                    // Verificar backend
                    retry(5) {
                        bat '''
                            curl -f http://localhost:8090/actuator/health || (echo "Backend not ready, retrying..." && timeout 10 > nul && exit 1)
                        '''
                    }
                    
                    echo "‚úÖ Todas las aplicaciones est√°n listas para el escaneo"
                }
            }
        }

        // ========== AN√ÅLISIS DIN√ÅMICO OWASP ZAP ==========
        stage('OWASP ZAP Security Scans') {
            parallel {
                stage('ZAP Baseline - Frontend') {
                    steps {
                        script {
                            echo "üï∑Ô∏è OWASP ZAP - Escaneando Frontend..."
                            
                            bat '''
                                docker run --rm ^
                                    -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                                    --network host ^
                                    -t zaproxy/zap-stable ^
                                    zap-baseline.py ^
                                    -t http://localhost:8070 ^
                                    -J zap-frontend-baseline-%TIMESTAMP%.json ^
                                    -r zap-frontend-baseline-%TIMESTAMP%.html ^
                                    -x zap-frontend-baseline-%TIMESTAMP%.xml ^
                                    --auto
                                exit /b 0
                            '''
                        }
                    }
                }
                
                stage('ZAP Baseline - Backend') {
                    steps {
                        script {
                            echo "üï∑Ô∏è OWASP ZAP - Escaneando Backend..."
                            
                            bat '''
                                docker run --rm ^
                                    -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                                    --network host ^
                                    -t zaproxy/zap-stable ^
                                    zap-baseline.py ^
                                    -t http://localhost:8090 ^
                                    -J zap-backend-baseline-%TIMESTAMP%.json ^
                                    -r zap-backend-baseline-%TIMESTAMP%.html ^
                                    -x zap-backend-baseline-%TIMESTAMP%.xml ^
                                    --auto
                                exit /b 0
                            '''
                        }
                    }
                }
                
                stage('ZAP API Scan') {
                    steps {
                        script {
                            echo "üï∑Ô∏è OWASP ZAP - API Security Scan..."
                            
                            bat '''
                                docker run --rm ^
                                    -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                                    --network host ^
                                    -t zaproxy/zap-stable ^
                                    zap-api-scan.py ^
                                    -t http://localhost:8090/v3/api-docs ^
                                    -f openapi ^
                                    -J zap-api-scan-%TIMESTAMP%.json ^
                                    -r zap-api-scan-%TIMESTAMP%.html ^
                                    -x zap-api-scan-%TIMESTAMP%.xml || echo "API scan completed"
                                exit /b 0
                            '''
                        }
                    }
                }
            }
        }

        // ========== AN√ÅLISIS AVANZADO ==========
        stage('Advanced Security Scans') {
            parallel {
                stage('ZAP Full Scan - Frontend') {
                    steps {
                        script {
                            echo "üï∑Ô∏è OWASP ZAP - Full Scan Frontend (puede tardar)..."
                            
                            bat '''
                                docker run --rm ^
                                    -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                                    --network host ^
                                    -t zaproxy/zap-stable ^
                                    zap-full-scan.py ^
                                    -t http://localhost:8070 ^
                                    -J zap-full-frontend-%TIMESTAMP%.json ^
                                    -r zap-full-frontend-%TIMESTAMP%.html ^
                                    -x zap-full-frontend-%TIMESTAMP%.xml ^
                                    --auto
                                exit /b 0
                            '''
                        }
                    }
                }
                
                stage('Container Security Scan') {
                    steps {
                        script {
                            echo "üê≥ Escaneando seguridad de containers..."
                            
                            bat '''
                                docker run --rm ^
                                    -v /var/run/docker.sock:/var/run/docker.sock ^
                                    -v "%cd%\\%REPORTS_DIR%:/output" ^
                                    aquasec/trivy image ^
                                    --format json ^
                                    --output /output/trivy-frontend-%TIMESTAMP%.json ^
                                    kahaozeng/prestabanco-frontend:latest || echo "Frontend container scan completed"
                                exit /b 0
                            '''
                            
                            bat '''
                                docker run --rm ^
                                    -v /var/run/docker.sock:/var/run/docker.sock ^
                                    -v "%cd%\\%REPORTS_DIR%:/output" ^
                                    aquasec/trivy image ^
                                    --format json ^
                                    --output /output/trivy-backend-%TIMESTAMP%.json ^
                                    kahaozeng/prestabanco-backend:latest || echo "Backend container scan completed"
                                exit /b 0
                            '''
                        }
                    }
                }
            }
        }

        // ========== AN√ÅLISIS DE RESULTADOS ==========
        stage('Security Analysis & Reports') {
            steps {
                script {
                    echo "üìä Generando an√°lisis consolidado de seguridad..."
                    
                    // Listar todos los reportes
                    bat "dir %REPORTS_DIR%"
                    
                    // Crear resumen de seguridad
                    bat '''
                        echo === RESUMEN DE SEGURIDAD === > "%REPORTS_DIR%/security-summary-%TIMESTAMP%.txt"
                        echo Fecha: %DATE% %TIME% >> "%REPORTS_DIR%/security-summary-%TIMESTAMP%.txt"
                        echo Pipeline: Docker Compose + OWASP ZAP + Snyk >> "%REPORTS_DIR%/security-summary-%TIMESTAMP%.txt"
                        echo. >> "%REPORTS_DIR%/security-summary-%TIMESTAMP%.txt"
                        echo Reportes generados: >> "%REPORTS_DIR%/security-summary-%TIMESTAMP%.txt"
                        dir /b "%REPORTS_DIR%" >> "%REPORTS_DIR%/security-summary-%TIMESTAMP%.txt"
                    '''
                    
                    echo "‚úÖ An√°lisis completo de seguridad finalizado"
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üßπ Limpiando recursos..."
                
                // Bajar containers
                bat '''
                    docker-compose -f %COMPOSE_FILE% down --remove-orphans || echo "Cleanup completed"
                '''
                
                echo "üìÅ Archivando reportes de seguridad..."
                archiveArtifacts artifacts: "${REPORTS_DIR}/**/*", allowEmptyArchive: true
                
                echo "üéØ PIPELINE DE SEGURIDAD COMPLETADO"
                echo "üìä Reportes disponibles en Jenkins artifacts"
            }
        }
        
        success {
            echo "‚úÖ Pipeline de seguridad ejecutado exitosamente"
        }
        
        failure {
            echo "‚ùå Pipeline fall√≥ - revisar logs para detalles"
        }
    }
}