pipeline {
    agent any
    
    options {
        // Limpieza autom√°tica - MANTENER SOLO 2 BUILDS
        buildDiscarder(logRotator(
            numToKeepStr: '2',
            artifactNumToKeepStr: '2'
        ))
    }
    
    environment {
        REPORTS_DIR = 'security-reports'
        COMPOSE_FILE = 'compose2.yml'
    }
    
    stages {
        stage('Cleanup Previous') {
            steps {
                // Limpiar reportes anteriores
                bat '''
                    if exist %REPORTS_DIR% (
                        echo "üßπ Limpiando reportes anteriores..."
                        rmdir /s /q %REPORTS_DIR% 2>nul || echo "No previous reports"
                    )
                    mkdir %REPORTS_DIR%
                '''
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
                echo "=== PIPELINE OWASP ZAP - SIN TIMESTAMPS ==="
            }
        }

        stage('Deploy Apps') {
            steps {
                bat '''
                    echo "üßπ Cleaning containers..."
                    docker-compose -f %COMPOSE_FILE% down --remove-orphans || echo "OK"
                    
                    echo "üöÄ Starting applications..."
                    docker-compose -f %COMPOSE_FILE% up -d
                    
                    echo "‚è≥ Waiting 30 seconds..."
                    ping localhost -n 31 > nul
                    
                    echo "üìä Container status:"
                    docker-compose -f %COMPOSE_FILE% ps
                '''
            }
        }

        stage('ZAP Frontend Scan') {
            steps {
                bat '''
                    echo "üï∑Ô∏è ZAP Frontend Baseline Scan..."
                    docker run --rm ^
                        -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                        --network host ^
                        zaproxy/zap-stable ^
                        zap-baseline.py ^
                        -t http://localhost:8070 ^
                        -r frontend-report.html ^
                        -J frontend-report.json ^
                        --auto || echo "Frontend scan completed with findings"
                    echo "‚úÖ Frontend scan termin√≥ - verificar reportes para vulnerabilidades"
                '''
            }
        }

        stage('Verify Backend Health') {
            steps {
                script {
                    echo "üîç Verificando que el backend est√© respondiendo..."
                    
                    def backendReady = false
                    for (int i = 0; i < 10; i++) {
                        def result = bat(script: 'curl -f -m 10 http://localhost:8090/actuator/health || exit 1', returnStatus: true)
                        if (result == 0) {
                            backendReady = true
                            echo "‚úÖ Backend est√° listo en el intento ${i+1}"
                            break
                        } else {
                            echo "‚ùå Backend no responde, intento ${i+1}/10"
                            bat 'ping localhost -n 6 > nul'
                        }
                    }
                    
                    if (!backendReady) {
                        echo "‚ö†Ô∏è Backend no responde despu√©s de 10 intentos"
                        echo "üîç Verificando containers..."
                        bat 'docker-compose -f %COMPOSE_FILE% ps'
                        bat 'docker-compose -f %COMPOSE_FILE% logs backend || echo "No backend logs"'
                    } else {
                        echo "üéØ Backend verificado, procediendo con ZAP scan..."
                    }
                }
            }
        }
            steps {
                bat '''
                    echo "üï∑Ô∏è ZAP Backend Baseline Scan..."
                    docker run --rm ^
                        -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                        --network host ^
                        zaproxy/zap-stable ^
                        zap-baseline.py ^
                        -t http://localhost:8090 ^
                        -r backend-report.html ^
                        -J backend-report.json ^
                        --auto || echo "Backend scan completed"
                '''
            }
        }

        stage('ZAP API Scan') {
            steps {
                bat '''
                    echo "üï∑Ô∏è ZAP API Scan..."
                    docker run --rm ^
                        -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                        --network host ^
                        zaproxy/zap-stable ^
                        zap-api-scan.py ^
                        -t http://localhost:8090/v3/api-docs ^
                        -f openapi ^
                        -r api-report.html ^
                        -J api-report.json || echo "API scan completed with findings"
                    echo "‚úÖ API scan termin√≥ - verificar reportes para vulnerabilidades"
                '''
            }
        }

        stage('Generate Summary') {
            steps {
                bat '''
                    echo === RESUMEN OWASP ZAP === > "%REPORTS_DIR%\\SUMMARY.txt"
                    echo Fecha: %DATE% %TIME% >> "%REPORTS_DIR%\\SUMMARY.txt"
                    echo. >> "%REPORTS_DIR%\\SUMMARY.txt"
                    echo ARCHIVOS GENERADOS: >> "%REPORTS_DIR%\\SUMMARY.txt"
                    echo üåê frontend-report.html >> "%REPORTS_DIR%\\SUMMARY.txt"
                    echo üåê backend-report.html >> "%REPORTS_DIR%\\SUMMARY.txt"
                    echo üåê api-report.html >> "%REPORTS_DIR%\\SUMMARY.txt"
                    echo. >> "%REPORTS_DIR%\\SUMMARY.txt"
                    echo INSTRUCCIONES: >> "%REPORTS_DIR%\\SUMMARY.txt"
                    echo 1. Descarga los archivos .HTML >> "%REPORTS_DIR%\\SUMMARY.txt"
                    echo 2. Abre en navegador >> "%REPORTS_DIR%\\SUMMARY.txt"
                    echo 3. Busca seccion ALERTS >> "%REPORTS_DIR%\\SUMMARY.txt"
                    echo. >> "%REPORTS_DIR%\\SUMMARY.txt"
                    echo TODOS LOS ARCHIVOS: >> "%REPORTS_DIR%\\SUMMARY.txt"
                    dir /b "%REPORTS_DIR%" >> "%REPORTS_DIR%\\SUMMARY.txt"
                '''
                
                bat "dir %REPORTS_DIR%"
                echo "üìã Solo deber√≠as ver: frontend-report, backend-report, api-report"
            }
        }
    }
    
    post {
        always {
            bat '''
                docker-compose -f %COMPOSE_FILE% down --remove-orphans || echo "Cleanup OK"
            '''
            
            archiveArtifacts artifacts: "${env.REPORTS_DIR}/**/*", allowEmptyArchive: true
            
            echo "‚úÖ PIPELINE COMPLETADO"
            echo "üìÅ Deber√≠as ver SOLO 6-7 archivos sin timestamps"
        }
    }
}