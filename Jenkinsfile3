pipeline {
    agent any
    
    environment {
        REPORTS_DIR = 'security-reports'
        TIMESTAMP = "${new Date().format('yyyyMMdd-HHmmss')}"
        COMPOSE_FILE = 'compose2.yml'
    }
    
    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }
        
        stage('Preparation') {
            steps {
                script {
                    // Crear directorio para reportes
                    bat "if not exist %REPORTS_DIR% mkdir %REPORTS_DIR%"
                    
                    echo "=== PIPELINE DE SEGURIDAD OWASP ZAP ==="
                    echo "üê≥ Desplegando aplicaciones autom√°ticamente"
                    echo "üï∑Ô∏è An√°lisis din√°mico completo con OWASP ZAP"
                }
            }
        }

        // ========== DESPLIEGUE AUTOM√ÅTICO ==========
        stage('Deploy Applications') {
            steps {
                script {
                    echo "üê≥ Desplegando aplicaciones con Docker Compose..."
                    
                    // Verificar que Docker Compose est√© disponible
                    bat '''
                        docker --version
                        docker-compose --version
                    '''
                    
                    // Verificar que el archivo compose2.yml existe
                    bat '''
                        if exist %COMPOSE_FILE% (
                            echo "‚úÖ Docker Compose file found: %COMPOSE_FILE%"
                        ) else (
                            echo "‚ùå Docker Compose file NOT found: %COMPOSE_FILE%"
                            exit 1
                        )
                    '''
                    
                    // Limpiar contenedores anteriores
                    bat '''
                        echo "üßπ Cleaning up previous containers..."
                        docker-compose -f %COMPOSE_FILE% down --remove-orphans || echo "No previous containers to remove"
                    '''
                    
                    // Levantar servicios con logs detallados
                    bat '''
                        echo "üöÄ Starting services with Docker Compose..."
                        docker-compose -f %COMPOSE_FILE% up -d
                    '''
                    
                    // Verificar que los containers se levantaron
                    bat '''
                        echo "üìä Checking container status..."
                        docker-compose -f %COMPOSE_FILE% ps
                        
                        echo "üìã Container logs preview:"
                        docker-compose -f %COMPOSE_FILE% logs --tail=10
                    '''
                    
                    echo "‚è≥ Services deployed, waiting for readiness..."
                }
            }
        }
        
        stage('Wait for Applications Ready') {
            steps {
                script {
                    echo "üîç Verificando que las aplicaciones est√©n listas..."
                    
                    // Esperar que los containers est√©n running (comando compatible con Windows)
                    bat '''
                        echo "Waiting for containers to be fully ready..."
                        ping localhost -n 31 > nul
                    '''
                    
                    // Verificar estado de containers
                    bat '''
                        echo "Checking container status..."
                        docker-compose -f %COMPOSE_FILE% ps
                    '''
                    
                    // Verificar frontend con reintentos
                    script {
                        def frontendReady = false
                        for (int i = 0; i < 5; i++) {
                            def result = bat(script: 'curl -f http://localhost:8070', returnStatus: true)
                            if (result == 0) {
                                frontendReady = true
                                echo "‚úÖ Frontend is ready!"
                                break
                            } else {
                                echo "Frontend not ready yet, attempt ${i+1}/5"
                                bat 'ping localhost -n 11 > nul'  // Wait 10 seconds
                            }
                        }
                        if (!frontendReady) {
                            echo "‚ö†Ô∏è Frontend not responding after 5 attempts"
                        }
                    }
                    
                    // Verificar backend con reintentos
                    script {
                        def backendReady = false
                        for (int i = 0; i < 5; i++) {
                            def result = bat(script: 'curl -f http://localhost:8090/actuator/health', returnStatus: true)
                            if (result == 0) {
                                backendReady = true
                                echo "‚úÖ Backend is ready!"
                                break
                            } else {
                                echo "Backend not ready yet, attempt ${i+1}/5"
                                bat 'ping localhost -n 11 > nul'  // Wait 10 seconds
                            }
                        }
                        if (!backendReady) {
                            echo "‚ö†Ô∏è Backend not responding after 5 attempts"
                        }
                    }
                    
                    echo "üîç Continuing with security scans..."
                }
            }
        }

        // ========== OWASP ZAP SECURITY SCANS ==========
        stage('OWASP ZAP Baseline Scans') {
            parallel {
                stage('ZAP Baseline - Frontend') {
                    steps {
                        script {
                            echo "üï∑Ô∏è OWASP ZAP - Baseline Scan Frontend..."
                            
                            bat '''
                                docker run --rm ^
                                    -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                                    --network host ^
                                    -t zaproxy/zap-stable ^
                                    zap-baseline.py ^
                                    -t http://localhost:8070 ^
                                    -J zap-frontend-baseline-%TIMESTAMP%.json ^
                                    -r zap-frontend-baseline-%TIMESTAMP%.html ^
                                    -x zap-frontend-baseline-%TIMESTAMP%.xml ^
                                    --auto
                                exit /b 0
                            '''
                        }
                    }
                }
                
                stage('ZAP Baseline - Backend') {
                    steps {
                        script {
                            echo "üï∑Ô∏è OWASP ZAP - Baseline Scan Backend..."
                            
                            bat '''
                                docker run --rm ^
                                    -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                                    --network host ^
                                    -t zaproxy/zap-stable ^
                                    zap-baseline.py ^
                                    -t http://localhost:8090 ^
                                    -J zap-backend-baseline-%TIMESTAMP%.json ^
                                    -r zap-backend-baseline-%TIMESTAMP%.html ^
                                    -x zap-backend-baseline-%TIMESTAMP%.xml ^
                                    --auto
                                exit /b 0
                            '''
                        }
                    }
                }
            }
        }
        
        stage('OWASP ZAP API Scan') {
            steps {
                script {
                    echo "üï∑Ô∏è OWASP ZAP - API Security Scan..."
                    
                    bat '''
                        docker run --rm ^
                            -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                            --network host ^
                            -t zaproxy/zap-stable ^
                            zap-api-scan.py ^
                            -t http://localhost:8090/v3/api-docs ^
                            -f openapi ^
                            -J zap-api-scan-%TIMESTAMP%.json ^
                            -r zap-api-scan-%TIMESTAMP%.html ^
                            -x zap-api-scan-%TIMESTAMP%.xml || echo "API scan completed"
                        exit /b 0
                    '''
                }
            }
        }

        // ========== OWASP ZAP FULL SCANS ==========
        stage('OWASP ZAP Full Scans') {
            parallel {
                stage('ZAP Full Scan - Frontend') {
                    steps {
                        script {
                            echo "üï∑Ô∏è OWASP ZAP - Full Scan Frontend (an√°lisis profundo)..."
                            
                            bat '''
                                docker run --rm ^
                                    -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                                    --network host ^
                                    -t zaproxy/zap-stable ^
                                    zap-full-scan.py ^
                                    -t http://localhost:8070 ^
                                    -J zap-full-frontend-%TIMESTAMP%.json ^
                                    -r zap-full-frontend-%TIMESTAMP%.html ^
                                    -x zap-full-frontend-%TIMESTAMP%.xml ^
                                    --auto
                                exit /b 0
                            '''
                        }
                    }
                }
                
                stage('ZAP Full Scan - Backend') {
                    steps {
                        script {
                            echo "üï∑Ô∏è OWASP ZAP - Full Scan Backend (an√°lisis profundo)..."
                            
                            bat '''
                                docker run --rm ^
                                    -v "%cd%\\%REPORTS_DIR%:/zap/wrk/:rw" ^
                                    --network host ^
                                    -t zaproxy/zap-stable ^
                                    zap-full-scan.py ^
                                    -t http://localhost:8090 ^
                                    -J zap-full-backend-%TIMESTAMP%.json ^
                                    -r zap-full-backend-%TIMESTAMP%.html ^
                                    -x zap-full-backend-%TIMESTAMP%.xml ^
                                    --auto
                                exit /b 0
                            '''
                        }
                    }
                }
            }
        }

        // ========== AN√ÅLISIS DE RESULTADOS ==========
        stage('Vulnerability Summary') {
            steps {
                script {
                    echo "üìä Generando resumen de vulnerabilidades..."
                    
                    // Resumen simple sin loops complejos
                    bat '''
                        echo === RESUMEN DE SEGURIDAD OWASP ZAP === > "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo Fecha: %DATE% %TIME% >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo Pipeline: OWASP ZAP Security Scan >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo. >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo === SCANS EJECUTADOS === >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo ‚úÖ ZAP Baseline Frontend >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo ‚úÖ ZAP Baseline Backend >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo ‚úÖ ZAP API Scan Backend >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo ‚úÖ ZAP Full Scan Frontend >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo ‚úÖ ZAP Full Scan Backend >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo. >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo === COMO REVISAR VULNERABILIDADES === >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo 1. Descarga los archivos .HTML desde Jenkins Build Artifacts >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo 2. Abre cada archivo .HTML en tu navegador web >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo 3. Busca la seccion "ALERTS" o "SUMMARY" >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo 4. Prioriza por severidad: HIGH ^> MEDIUM ^> LOW ^> INFO >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo 5. Lee las recomendaciones de cada vulnerabilidad >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo. >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo === ARCHIVOS IMPORTANTES === >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo - SECURITY-SUMMARY.txt: Este archivo (instrucciones) >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo - zap-frontend-baseline.html: Vulnerabilidades Frontend >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo - zap-backend-baseline.html: Vulnerabilidades Backend >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo - zap-api-scan.html: Vulnerabilidades API REST >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo - zap-full-*.html: An√°lisis profundo (m√°s detallado) >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo. >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        echo === TODOS LOS ARCHIVOS GENERADOS === >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                        dir /b "%REPORTS_DIR%" >> "%REPORTS_DIR%/SECURITY-SUMMARY-%TIMESTAMP%.txt"
                    '''
                    
                    echo "üìä Resumen de seguridad generado exitosamente"
                    echo "üìÅ Archivo principal: SECURITY-SUMMARY.txt"
                }
            }
        }
        
        stage('Security Analysis & Reports') {
            steps {
                script {
                    echo "üìä Generando an√°lisis consolidado de vulnerabilidades..."
                    
                    // Listar todos los reportes
                    bat "dir %REPORTS_DIR%"
                    
                    // Crear resumen de vulnerabilidades detallado
                    bat '''
                        echo === RESUMEN DETALLADO DE VULNERABILIDADES OWASP ZAP === > "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo Fecha: %DATE% %TIME% >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo Pipeline: Docker Compose + OWASP ZAP >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo. >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo === SCANS EJECUTADOS === >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo ‚úÖ ZAP Baseline Frontend >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo ‚úÖ ZAP Baseline Backend >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo ‚úÖ ZAP API Scan Backend >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo ‚úÖ ZAP Full Scan Frontend >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo ‚úÖ ZAP Full Scan Backend >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo. >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo === COMO REVISAR VULNERABILIDADES === >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo 1. Descarga los archivos .HTML desde Jenkins Artifacts >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo 2. Abre los .HTML en tu navegador >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo 3. Revisa seccion "Alerts" para vulnerabilidades >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo 4. Prioriza: HIGH ^> MEDIUM ^> LOW ^> INFO >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo. >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo === ARCHIVOS IMPORTANTES === >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo - VULNERABILITIES-SUMMARY: Este archivo >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo - CRITICAL-VULNERABILITIES: Vulnerabilidades cr√≠ticas >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo - VULNERABILITY-COUNT: Conteo por tipo >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo - zap-***.html: Reportes visuales completos >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo. >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        echo === ARCHIVOS GENERADOS === >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                        dir /b "%REPORTS_DIR%" >> "%REPORTS_DIR%/VULNERABILITIES-SUMMARY-%TIMESTAMP%.txt"
                    '''
                    
                    // Contar archivos de reportes
                    def reportCount = bat(script: 'dir /b "%REPORTS_DIR%" | find /c ".html"', returnStdout: true).trim()
                    
                    echo "‚úÖ An√°lisis completo de seguridad OWASP ZAP finalizado"
                    echo "üìä Tipos de reportes: JSON (datos), HTML (visual), XML (integraci√≥n)"
                    echo "üîç ${reportCount} reportes HTML generados para revisi√≥n"
                    echo "üìÅ IMPORTANTE: Descarga y abre los archivos .HTML para ver vulnerabilidades"
                    echo "üéØ Revisa especialmente: CRITICAL-VULNERABILITIES.txt y VULNERABILITY-COUNT.txt"
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üßπ Limpiando recursos..."
                
                // Bajar containers
                bat '''
                    docker-compose -f %COMPOSE_FILE% down --remove-orphans || echo "Cleanup completed"
                '''
                
                echo "üìÅ Archivando reportes de seguridad OWASP ZAP..."
                archiveArtifacts artifacts: "${REPORTS_DIR}/**/*", allowEmptyArchive: true
                
                echo "üéØ PIPELINE OWASP ZAP COMPLETADO"
                echo "üìä Reportes disponibles en Jenkins artifacts"
                echo "üï∑Ô∏è An√°lisis din√°mico de seguridad web completo"
            }
        }
        
        success {
            echo "‚úÖ Pipeline OWASP ZAP ejecutado exitosamente"
            echo "üîç Revisa los reportes HTML para ver vulnerabilidades detalladas"
        }
        
        failure {
            echo "‚ùå Pipeline fall√≥ - revisar logs para detalles"
            echo "üí° Tip: Las aplicaciones deben estar disponibles para el escaneo"
        }
    }
}