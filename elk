pipeline {
    agent any
    
    parameters {
        booleanParam(
            name: 'RESTART_ELK',
            defaultValue: false,
            description: 'Forzar reinicio completo del stack ELK'
        )
        booleanParam(
            name: 'RESET_DATA',
            defaultValue: false,
            description: '‚ö†Ô∏è CUIDADO: Eliminar todos los datos de ELK'
        )
    }
    
    environment {
        KIBANA_URL = 'http://localhost:5601'
        ELASTICSEARCH_URL = 'http://localhost:9200'
    }
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "=== PRESTABANCO ELK STACK SETUP ==="
                    echo "üéØ Objetivo: Configurar monitoreo continuo"
                    echo "üìä Stack: Elasticsearch + Kibana + Logstash"
                }
            }
        }
        
        stage('Check Current State') {
            steps {
                script {
                    def elkRunning = false
                    
                    try {
                        def result = bat(script: 'docker ps --filter "name=elasticsearch-1" --filter "name=kibana-1" --format "{{.Names}}"', returnStdout: true).trim()
                        def runningContainers = result.split('\n').findAll { it.trim() }
                        
                        if (runningContainers.size() >= 2) {
                            elkRunning = true
                            echo "‚úÖ ELK Stack ya est√° corriendo"
                        } else {
                            echo "üîÑ ELK Stack necesita ser iniciado"
                        }
                        
                    } catch (Exception e) {
                        echo "No se pudo verificar estado actual"
                    }
                    
                    env.ELK_RUNNING = elkRunning.toString()
                }
            }
        }
        
        stage('Cleanup Data') {
            when {
                expression { params.RESET_DATA }
            }
            steps {
                script {
                    echo "‚ö†Ô∏è ELIMINANDO TODOS LOS DATOS DE ELK..."
                    
                    bat 'docker-compose -f compose2.yml down -v'
                    
                    try {
                        bat 'docker volume rm prestabanco_elasticsearch_data'
                    } catch (Exception e) {
                        echo "Volume ya eliminado o no existe"
                    }
                    
                    echo "üóëÔ∏è Datos de ELK eliminados"
                }
            }
        }
        
        stage('Deploy ELK Stack') {
            when {
                anyOf {
                    expression { params.RESTART_ELK }
                    expression { params.RESET_DATA }
                    expression { env.ELK_RUNNING == 'false' }
                }
            }
            steps {
                script {
                    if (params.RESTART_ELK && !params.RESET_DATA) {
                        echo "üîÑ Reiniciando ELK Stack..."
                        bat 'docker-compose -f compose2.yml stop elasticsearch kibana logstash'
                        bat 'docker-compose -f compose2.yml rm -f elasticsearch kibana logstash'
                    }
                    
                    echo "üöÄ Iniciando aplicaci√≥n PrestaBanco..."
                    bat 'docker-compose -f compose2.yml up -d frontend backend postgres'
                    sleep(time: 45, unit: 'SECONDS')
                    
                    echo "üöÄ Iniciando Elasticsearch..."
                    bat 'docker-compose -f compose2.yml up -d elasticsearch'
                    sleep(time: 90, unit: 'SECONDS')
                    
                    echo "üìä Iniciando Kibana..."
                    bat 'docker-compose -f compose2.yml up -d kibana'
                    sleep(time: 60, unit: 'SECONDS')
                    
                    echo "üìù Iniciando Logstash..."
                    bat 'docker-compose -f compose2.yml up -d logstash'
                    sleep(time: 30, unit: 'SECONDS')
                }
            }
        }
        
        stage('Start Missing Services') {
            when {
                expression { env.ELK_RUNNING == 'true' && !params.RESTART_ELK }
            }
            steps {
                script {
                    echo "üîç Verificando servicios ELK existentes..."
                    
                    try {
                        bat 'docker-compose -f compose2.yml up -d elasticsearch kibana logstash'
                        sleep(time: 30, unit: 'SECONDS')
                        echo "‚úÖ Servicios ELK verificados/iniciados"
                    } catch (Exception e) {
                        echo "Warning: Error verificando servicios - ${e.message}"
                    }
                }
            }
        }
        
        stage('Verify ELK Health') {
            steps {
                script {
                    def elasticsearchOk = false
                    def kibanaOk = false
                    def logstashOk = false
                    
                    echo "üîç Verificando salud del stack ELK..."
                    bat 'docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"'
                    
                    // Elasticsearch
                    try {
                        bat 'powershell -Command "Invoke-WebRequest -Uri http://localhost:9200/_cluster/health -TimeoutSec 20 -UseBasicParsing | Out-Null"'
                        elasticsearchOk = true
                        echo "‚úÖ Elasticsearch: HEALTHY"
                    } catch (Exception e) {
                        echo "‚ùå Elasticsearch: FAILED"
                        try {
                            bat 'docker logs elasticsearch-1 --tail 10'
                        } catch (Exception logError) {
                            echo "No se pudieron obtener logs de Elasticsearch"
                        }
                    }
                    
                    // Kibana
                    try {
                        bat 'powershell -Command "Invoke-WebRequest -Uri http://localhost:5601 -TimeoutSec 25 -UseBasicParsing | Out-Null"'
                        kibanaOk = true
                        echo "‚úÖ Kibana: HEALTHY"
                    } catch (Exception e) {
                        echo "‚ùå Kibana: FAILED"
                        try {
                            bat 'docker logs kibana-1 --tail 10'
                        } catch (Exception logError) {
                            echo "No se pudieron obtener logs de Kibana"
                        }
                    }
                    
                    // Logstash
                    try {
                        bat 'netstat -an | findstr ":5514" | findstr UDP'
                        logstashOk = true
                        echo "‚úÖ Logstash: HEALTHY (puerto 5514 UDP activo)"
                    } catch (Exception e) {
                        echo "‚ùå Logstash: FAILED"
                    }
                    
                    env.ELASTICSEARCH_OK = elasticsearchOk.toString()
                    env.KIBANA_OK = kibanaOk.toString()
                    env.LOGSTASH_OK = logstashOk.toString()
                    env.ELK_HEALTHY = (elasticsearchOk && kibanaOk && logstashOk).toString()
                }
            }
        }
        
        stage('Configure ELK for PrestaBanco') {
            when {
                expression { env.ELASTICSEARCH_OK == 'true' }
            }
            steps {
                script {
                    echo "‚öôÔ∏è Configurando ELK para PrestaBanco..."
                    
                    try {
                        // Crear template para logs de seguridad
                        bat '''
                            powershell -Command "
                            $securityTemplate = @{
                                index_patterns = @('prestabanco-security*')
                                settings = @{
                                    number_of_shards = 1
                                    number_of_replicas = 0
                                }
                                mappings = @{
                                    properties = @{
                                        timestamp = @{ type = 'date' }
                                        event = @{ type = 'keyword' }
                                        build_number = @{ type = 'keyword' }
                                        service = @{ type = 'keyword' }
                                        target = @{ type = 'keyword' }
                                        scan_type = @{ type = 'keyword' }
                                        application = @{ type = 'keyword' }
                                    }
                                }
                            } | ConvertTo-Json -Depth 10
                            
                            Invoke-RestMethod -Uri 'http://localhost:9200/_index_template/prestabanco-security' -Method PUT -Body $securityTemplate -ContentType 'application/json'
                            Write-Host 'Template de seguridad configurado'
                            "
                        '''
                        
                        // Crear template para logs de aplicaci√≥n
                        bat '''
                            powershell -Command "
                            $appTemplate = @{
                                index_patterns = @('prestabanco-app-logs*')
                                settings = @{
                                    number_of_shards = 1
                                    number_of_replicas = 0
                                }
                                mappings = @{
                                    properties = @{
                                        '@timestamp' = @{ type = 'date' }
                                        service = @{ type = 'keyword' }
                                        message = @{ type = 'text' }
                                        program = @{ type = 'keyword' }
                                        host = @{ type = 'keyword' }
                                        application = @{ type = 'keyword' }
                                    }
                                }
                            } | ConvertTo-Json -Depth 10
                            
                            Invoke-RestMethod -Uri 'http://localhost:9200/_index_template/prestabanco-app-logs' -Method PUT -Body $appTemplate -ContentType 'application/json'
                            Write-Host 'Template de aplicaci√≥n configurado'
                            "
                        '''
                        
                        // Crear documento de inicializaci√≥n
                        bat '''
                            powershell -Command "
                            $initDoc = @{
                                timestamp = (Get-Date -Format 'yyyy-MM-ddTHH:mm:ss.fffZ')
                                event = 'elk_stack_initialized'
                                build_number = '%BUILD_NUMBER%'
                                message = 'ELK Stack configurado y listo para PrestaBanco'
                                service = 'elk-setup'
                                application = 'prestabanco'
                            } | ConvertTo-Json
                            
                            Invoke-RestMethod -Uri 'http://localhost:9200/prestabanco-security/_doc' -Method POST -Body $initDoc -ContentType 'application/json'
                            Write-Host 'Documento de inicializaci√≥n creado'
                            "
                        '''
                        
                        echo "‚úÖ ELK configurado para PrestaBanco"
                        
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Warning: Error en configuraci√≥n - ${e.message}"
                    }
                }
            }
        }
        
        stage('Test ELK Functionality') {
            when {
                expression { env.ELK_HEALTHY == 'true' }
            }
            steps {
                script {
                    echo "üß™ Probando funcionalidad de ELK..."
                    
                    try {
                        // Test de escritura en Elasticsearch
                        bat '''
                            powershell -Command "
                            $testDoc = @{
                                timestamp = (Get-Date -Format 'yyyy-MM-ddTHH:mm:ss.fffZ')
                                event = 'elk_health_check'
                                message = 'Test de funcionalidad ELK'
                                service = 'elk-pipeline'
                                application = 'prestabanco'
                                test = $true
                            } | ConvertTo-Json
                            
                            Invoke-RestMethod -Uri 'http://localhost:9200/prestabanco-security/_doc' -Method POST -Body $testDoc -ContentType 'application/json'
                            Write-Host 'Test de escritura: OK'
                            "
                        '''
                        
                        // Verificar √≠ndices
                        bat '''
                            powershell -Command "
                            $indices = Invoke-WebRequest -Uri 'http://localhost:9200/_cat/indices?v' -UseBasicParsing
                            Write-Host '√çndices disponibles:'
                            Write-Host $indices.Content
                            "
                        '''
                        
                        // Test de b√∫squeda
                        bat '''
                            powershell -Command "
                            $search = Invoke-WebRequest -Uri 'http://localhost:9200/prestabanco-security/_search?q=elk_health_check' -UseBasicParsing
                            Write-Host 'Test de b√∫squeda: OK'
                            "
                        '''
                        
                        echo "‚úÖ Todos los tests de ELK pasaron"
                        
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Warning: Algunos tests fallaron - ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo """
                =====================================
                  PRESTABANCO ELK STACK STATUS
                =====================================
                
                üìä COMPONENTES:
                  Elasticsearch: ${env.ELASTICSEARCH_OK == 'true' ? '‚úÖ ACTIVO' : '‚ùå INACTIVO'}
                  Kibana:        ${env.KIBANA_OK == 'true' ? '‚úÖ DISPONIBLE' : '‚ùå NO DISPONIBLE'}
                  Logstash:      ${env.LOGSTASH_OK == 'true' ? '‚úÖ CAPTURANDO' : '‚ùå INACTIVO'}
                
                üåê ACCESO:
                  üìà Elasticsearch API: ${env.ELASTICSEARCH_OK == 'true' ? 'http://localhost:9200' : 'NO DISPONIBLE'}
                  üìä Kibana Dashboard: ${env.KIBANA_OK == 'true' ? 'http://localhost:5601' : 'NO DISPONIBLE'}
                
                üìã √çNDICES CONFIGURADOS:
                  üîí Seguridad: prestabanco-security*
                  üåê Aplicaci√≥n: prestabanco-app-logs*
                
                ‚öôÔ∏è CONFIGURACI√ìN:
                  Templates: ${env.ELASTICSEARCH_OK == 'true' ? '‚úÖ CONFIGURADOS' : '‚ùå NO CONFIGURADOS'}
                  Mapeo de campos: ${env.ELASTICSEARCH_OK == 'true' ? '‚úÖ LISTO' : '‚ùå PENDIENTE'}
                  
                üéØ ESTADO GENERAL: ${env.ELK_HEALTHY == 'true' ? '‚úÖ ELK STACK OPERATIVO' : '‚ö†Ô∏è REQUIERE ATENCI√ìN'}
                
                üìù PR√ìXIMOS PASOS:
                  1. Ejecutar pipeline de seguridad OWASP ZAP
                  2. Los logs aparecer√°n autom√°ticamente en Kibana
                  3. Crear dashboards en Kibana para visualizaci√≥n
                
                üí° NOTA: Este stack permanece corriendo 24/7
                =====================================
                """
            }
        }
        
        success {
            script {
                if (env.ELK_HEALTHY == 'true') {
                    echo "üéâ ELK STACK CONFIGURADO Y OPERATIVO"
                    echo "üìä Dashboard disponible en: http://localhost:5601"
                    echo "üîí Listo para recibir logs de seguridad"
                } else {
                    echo "‚ö†Ô∏è ELK STACK PARCIALMENTE CONFIGURADO"
                    echo "üîß Revisar logs para diagn√≥stico"
                }
            }
        }
        
        failure {
            echo "‚ùå ERROR EN CONFIGURACI√ìN DE ELK STACK"
        }
        
        unstable {
            echo "‚ö†Ô∏è ELK STACK CONFIGURADO CON WARNINGS"
        }
    }
}