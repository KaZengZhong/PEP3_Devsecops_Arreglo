pipeline {
    agent any
    
    parameters {
        choice(
            name: 'SCAN_DEPTH',
            choices: ['QUICK', 'STANDARD', 'COMPREHENSIVE'],
            description: 'Profundidad del escaneo de seguridad'
        )
        booleanParam(
            name: 'DEPLOY_ELK',
            defaultValue: true,
            description: 'Desplegar Elastic Stack'
        )
        booleanParam(
            name: 'SEND_TO_ELASTIC',
            defaultValue: true,
            description: 'Enviar resultados a Elasticsearch'
        )
    }
    
    environment {
        REPORTS_DIR = 'security-reports'
        ELK_DIR = 'elk-stack'
        FRONTEND_URL = 'http://localhost:8070'
        BACKEND_URL = 'http://localhost:8090'
        ELASTICSEARCH_URL = 'http://localhost:9200'
        KIBANA_URL = 'http://localhost:5601'
        ELASTIC_INDEX = 'prestabanco-security'
    }
    
    stages {
        stage('Initialize ELK Pipeline') {
            steps {
                script {
                    echo "=== PRESTABANCO SECURITY + ELASTIC STACK PIPELINE ==="
                    echo "Frontend: ${FRONTEND_URL}"
                    echo "Backend: ${BACKEND_URL}"
                    echo "Elasticsearch: ${ELASTICSEARCH_URL}"
                    echo "Kibana: ${KIBANA_URL}"
                    
                    bat """
                        if exist ${REPORTS_DIR} rmdir /s /q ${REPORTS_DIR}
                        if exist ${ELK_DIR} rmdir /s /q ${ELK_DIR}
                        mkdir ${REPORTS_DIR}
                        mkdir ${ELK_DIR}
                        mkdir ${ELK_DIR}\\config
                        mkdir ${ELK_DIR}\\data
                    """
                }
            }
        }
        
        stage('Setup Elastic Stack Configuration') {
            when {
                expression { params.DEPLOY_ELK == true }
            }
            steps {
                script {
                    echo "Configurando Elastic Stack..."
                    
                    bat """
                        echo version: '3.8' > ${ELK_DIR}\\docker-compose-elk.yml
                        echo services: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo   elasticsearch: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0 >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     container_name: elasticsearch >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     environment: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       - discovery.type=single-node >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       - xpack.security.enabled=false >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       - xpack.security.enrollment.enabled=false >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       - "ES_JAVA_OPTS=-Xms1g -Xmx1g" >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     ports: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       - "9200:9200" >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       - "9300:9300" >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     volumes: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       - elasticsearch_data:/usr/share/elasticsearch/data >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     networks: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       - elk >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     healthcheck: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"] >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       interval: 30s >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       timeout: 10s >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       retries: 5 >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo. >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo   kibana: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     image: docker.elastic.co/kibana/kibana:8.11.0 >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     container_name: kibana >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     environment: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       - xpack.security.enabled=false >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       - xpack.encryptedSavedObjects.encryptionKey=fhjskloppd678ehkdfdlliverpoolfcr >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     ports: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       - "5601:5601" >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     depends_on: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       elasticsearch: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo         condition: service_healthy >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     networks: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       - elk >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     healthcheck: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"] >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       interval: 30s >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       timeout: 10s >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo       retries: 5 >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo. >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo networks: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo   elk: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo     driver: bridge >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo. >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo volumes: >> ${ELK_DIR}\\docker-compose-elk.yml
                        echo   elasticsearch_data: >> ${ELK_DIR}\\docker-compose-elk.yml
                    """
                }
            }
        }
        
        stage('Deploy Elastic Stack') {
            when {
                expression { params.DEPLOY_ELK == true }
            }
            steps {
                script {
                    echo "Desplegando Elastic Stack..."
                    try {
                        bat 'cd ' + ELK_DIR + ' && docker-compose -f docker-compose-elk.yml down || echo "No ELK containers to stop"'
                        bat 'cd ' + ELK_DIR + ' && docker-compose -f docker-compose-elk.yml up -d'
                        
                        echo "Esperando que Elasticsearch inicie usando healthcheck..."
                        
                        timeout(time: 8, unit: 'MINUTES') {
                            waitUntil {
                                script {
                                    try {
                                        def result = bat(script: 'curl -f ' + ELASTICSEARCH_URL + '/_cluster/health?wait_for_status=yellow&timeout=10s', returnStatus: true)
                                        if (result == 0) {
                                            echo "Elasticsearch listo y saludable"
                                            return true
                                        }
                                        echo "Elasticsearch aun inicializando..."
                                        return false
                                    } catch (Exception e) {
                                        echo "Esperando Elasticsearch: ${e.message}"
                                        return false
                                    }
                                }
                            }
                        }
                        
                        echo "Esperando que Kibana inicie..."
                        timeout(time: 5, unit: 'MINUTES') {
                            waitUntil {
                                script {
                                    try {
                                        def result = bat(script: 'curl -f ' + KIBANA_URL + '/api/status', returnStatus: true)
                                        if (result == 0) {
                                            echo "Kibana listo"
                                            return true
                                        }
                                        echo "Kibana aun inicializando..."
                                        return false
                                    } catch (Exception e) {
                                        echo "Esperando Kibana..."
                                        return false
                                    }
                                }
                            }
                        }
                        
                        echo "ELK Stack completamente inicializado"
                        
                    } catch (Exception e) {
                        echo "Warning: ELK deployment issue: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Deploy PrestaBanco Services') {
            steps {
                script {
                    echo "Desplegando servicios PrestaBanco..."
                    bat 'docker-compose -f compose2.yml down || echo "No containers to stop"'
                    bat 'docker-compose -f compose2.yml up -d'
                    
                    echo "Verificando servicios PrestaBanco..."
                }
            }
        }
        
        stage('Smart Service Verification') {
            steps {
                script {
                    def frontendOk = false
                    def backendOk = false
                    def elasticOk = false
                    def kibanaOk = false
                    
                    echo "Verificando todos los servicios inteligentemente..."
                    bat 'docker ps --format "table {{.Names}}\\t{{.Ports}}\\t{{.Status}}"'
                    
                    echo "Verificando Frontend con reintentos..."
                    for (int i = 0; i < 10; i++) {
                        try {
                            bat 'powershell -Command "Invoke-WebRequest -Uri http://localhost:8070 -TimeoutSec 5 -UseBasicParsing | Out-Null"'
                            frontendOk = true
                            echo "Frontend listo intento ${i+1}"
                            break
                        } catch (Exception e) {
                            if (i < 9) {
                                echo "Frontend intento ${i+1}/10 - esperando 15s..."
                                sleep(time: 15, unit: 'SECONDS')
                            } else {
                                echo "Frontend no disponible despues de 10 intentos"
                            }
                        }
                    }
                    
                    echo "Verificando Backend puerto y HTTP..."
                    for (int i = 0; i < 10; i++) {
                        try {
                            bat 'powershell -Command "Test-NetConnection -ComputerName localhost -Port 8090 -WarningAction SilentlyContinue"'
                            echo "Backend puerto OK intento ${i+1}"
                            backendOk = true
                            break
                        } catch (Exception e) {
                            if (i < 9) {
                                echo "Backend intento ${i+1}/10 - esperando 15s..."
                                sleep(time: 15, unit: 'SECONDS')
                            } else {
                                echo "Backend no disponible despues de 10 intentos"
                            }
                        }
                    }
                    
                    if (params.DEPLOY_ELK) {
                        try {
                            bat 'curl -f ' + ELASTICSEARCH_URL + '/_cluster/health'
                            elasticOk = true
                            echo "Elasticsearch OK"
                        } catch (Exception e) {
                            echo "Elasticsearch: ${e.message}"
                        }
                        
                        try {
                            bat 'curl -f ' + KIBANA_URL + '/api/status'
                            kibanaOk = true
                            echo "Kibana OK"
                        } catch (Exception e) {
                            echo "Kibana: ${e.message}"
                        }
                    }
                    
                    env.FRONTEND_OK = frontendOk.toString()
                    env.BACKEND_OK = backendOk.toString()
                    env.ELASTIC_OK = elasticOk.toString()
                    env.KIBANA_OK = kibanaOk.toString()
                    
                    echo """
                    === ESTADO FINAL DE SERVICIOS ===
                    Frontend:      ${frontendOk ? 'OK' : 'FAIL'}
                    Backend:       ${backendOk ? 'OK' : 'FAIL'}
                    Elasticsearch: ${elasticOk ? 'OK' : 'FAIL'}
                    Kibana:        ${kibanaOk ? 'OK' : 'FAIL'}
                    """
                }
            }
        }
        
        stage('Security Scan with ELK Integration') {
            steps {
                script {
                    echo "Ejecutando scans de seguridad..."
                    
                    if (env.FRONTEND_OK == 'true') {
                        echo "Escaneando Frontend..."
                        try {
                            timeout(time: 20, unit: 'MINUTES') {
                                bat "docker run --rm --network host -v \"%cd%\\${REPORTS_DIR}:/zap/wrk\" zaproxy/zap-stable zap-baseline.py -t ${FRONTEND_URL} -J frontend-report.json -x frontend-report.xml -r frontend-report.html"
                            }
                            echo "Frontend scan completado"
                        } catch (Exception e) {
                            echo "Frontend scan con warnings: ${e.message}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                    
                    if (env.BACKEND_OK == 'true') {
                        echo "Escaneando Backend..."
                        try {
                            timeout(time: 20, unit: 'MINUTES') {
                                bat "docker run --rm --network host -v \"%cd%\\${REPORTS_DIR}:/zap/wrk\" zaproxy/zap-stable zap-baseline.py -t ${BACKEND_URL} -J backend-report.json -x backend-report.xml -r backend-report.html"
                            }
                            echo "Backend scan completado"
                        } catch (Exception e) {
                            echo "Backend scan con warnings: ${e.message}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }
        
        stage('Process and Send to Elasticsearch') {
            when {
                allOf {
                    expression { params.SEND_TO_ELASTIC == true }
                    expression { env.ELASTIC_OK == 'true' }
                }
            }
            steps {
                script {
                    echo "Procesando reportes para Elasticsearch..."
                    
                    try {
                        bat 'curl -X PUT "' + ELASTICSEARCH_URL + '/' + ELASTIC_INDEX + '-template" -H "Content-Type: application/json"'
                        
                        if (env.FRONTEND_OK == 'true') {
                            bat """
                                powershell -Command "
                                if (Test-Path '${REPORTS_DIR}\\frontend-report.json') {
                                    try {
                                        Write-Host 'Procesando frontend-report.json...'
                                        \\$jsonContent = Get-Content '${REPORTS_DIR}\\frontend-report.json' -Raw
                                        \\$jsonData = \\$jsonContent | ConvertFrom-Json
                                        
                                        if (\\$jsonData.site -and \\$jsonData.site.alerts) {
                                            Write-Host 'Encontradas alertas en frontend'
                                            foreach (\\$alert in \\$jsonData.site.alerts) {
                                                \\$document = @{
                                                    timestamp = (Get-Date).ToString('yyyy-MM-ddTHH:mm:ss.fffZ')
                                                    project = 'prestabanco'
                                                    scan_type = 'frontend_security'
                                                    build_number = '${BUILD_NUMBER}'
                                                    alert_name = \\$alert.name
                                                    risk_level = \\$alert.riskdesc
                                                    target_url = '${FRONTEND_URL}'
                                                    description = \\$alert.desc
                                                    solution = \\$alert.solution
                                                }
                                                \\$jsonDoc = \\$document | ConvertTo-Json -Compress
                                                
                                                try {
                                                    \\$response = Invoke-RestMethod -Uri '${ELASTICSEARCH_URL}/${ELASTIC_INDEX}-frontend/_doc' -Method POST -Body \\$jsonDoc -ContentType 'application/json'
                                                    Write-Host 'Enviado: ' \\$alert.name
                                                } catch {
                                                    Write-Host 'Error enviando alerta: ' \\$_.Exception.Message
                                                }
                                            }
                                        } else {
                                            Write-Host 'No se encontraron alertas en el JSON de frontend'
                                        }
                                    } catch {
                                        Write-Host 'Error procesando frontend JSON: ' \\$_.Exception.Message
                                    }
                                } else {
                                    Write-Host 'Archivo frontend-report.json no encontrado'
                                }
                                "
                            """
                        }
                        
                        if (env.BACKEND_OK == 'true') {
                            bat """
                                powershell -Command "
                                if (Test-Path '${REPORTS_DIR}\\backend-report.json') {
                                    try {
                                        Write-Host 'Procesando backend-report.json...'
                                        \\$jsonContent = Get-Content '${REPORTS_DIR}\\backend-report.json' -Raw
                                        \\$jsonData = \\$jsonContent | ConvertFrom-Json
                                        
                                        if (\\$jsonData.site -and \\$jsonData.site.alerts) {
                                            Write-Host 'Encontradas alertas en backend'
                                            foreach (\\$alert in \\$jsonData.site.alerts) {
                                                \\$document = @{
                                                    timestamp = (Get-Date).ToString('yyyy-MM-ddTHH:mm:ss.fffZ')
                                                    project = 'prestabanco'
                                                    scan_type = 'backend_security'
                                                    build_number = '${BUILD_NUMBER}'
                                                    alert_name = \\$alert.name
                                                    risk_level = \\$alert.riskdesc
                                                    target_url = '${BACKEND_URL}'
                                                    description = \\$alert.desc
                                                    solution = \\$alert.solution
                                                }
                                                \\$jsonDoc = \\$document | ConvertTo-Json -Compress
                                                
                                                try {
                                                    \\$response = Invoke-RestMethod -Uri '${ELASTICSEARCH_URL}/${ELASTIC_INDEX}-backend/_doc' -Method POST -Body \\$jsonDoc -ContentType 'application/json'
                                                    Write-Host 'Enviado: ' \\$alert.name
                                                } catch {
                                                    Write-Host 'Error enviando alerta: ' \\$_.Exception.Message
                                                }
                                            }
                                        } else {
                                            Write-Host 'No se encontraron alertas en el JSON de backend'
                                        }
                                    } catch {
                                        Write-Host 'Error procesando backend JSON: ' \\$_.Exception.Message
                                    }
                                } else {
                                    Write-Host 'Archivo backend-report.json no encontrado'
                                }
                                "
                            """
                        }
                        
                        echo "Procesamiento completado"
                        
                        sleep(time: 5, unit: 'SECONDS')
                        bat 'curl "' + ELASTICSEARCH_URL + '/' + ELASTIC_INDEX + '-*/_search?size=0" | findstr total'
                        
                    } catch (Exception e) {
                        echo "Warning enviando datos: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Setup Kibana') {
            when {
                allOf {
                    expression { params.DEPLOY_ELK == true }
                    expression { env.KIBANA_OK == 'true' }
                }
            }
            steps {
                script {
                    echo "Configurando Kibana..."
                    
                    try {
                        bat 'curl -X POST "' + KIBANA_URL + '/api/saved_objects/index-pattern/' + ELASTIC_INDEX + '-*" -H "Content-Type: application/json" -H "kbn-xsrf: true"'
                        echo "Kibana configurado"
                    } catch (Exception e) {
                        echo "Warning configurando Kibana: ${e.message}"
                    }
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                script {
                    echo "Generando reportes finales..."
                    
                    bat """
                        echo ========================================== > ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo    PRESTABANCO + ELASTIC STACK REPORT    >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo ========================================== >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo Fecha: %date% %time% >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo Build: ${BUILD_NUMBER} >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo Pipeline optimizado: Sleeps inteligentes >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo SERVICIOS DESPLEGADOS: >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo Frontend:      ${env.FRONTEND_OK == 'true' ? 'ACTIVO' : 'INACTIVO'} - ${FRONTEND_URL} >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo Backend:       ${env.BACKEND_OK == 'true' ? 'ACTIVO' : 'INACTIVO'} - ${BACKEND_URL} >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo Elasticsearch: ${env.ELASTIC_OK == 'true' ? 'ACTIVO' : 'INACTIVO'} - ${ELASTICSEARCH_URL} >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo Kibana:        ${env.KIBANA_OK == 'true' ? 'ACTIVO' : 'INACTIVO'} - ${KIBANA_URL} >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo OPTIMIZACIONES APLICADAS: >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo - Healthchecks en docker-compose >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo - WaitUntil en lugar de sleep fijo >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo - Verificacion por reintentos inteligentes >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo - Timeouts configurables >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo - Verificacion de estado antes de scans >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo - PowerShell corregido para envio a ELK >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo ACCESO DIRECTO: >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo Kibana: ${KIBANA_URL} >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo Elasticsearch: ${ELASTICSEARCH_URL} >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo COMO USAR KIBANA: >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo 1. Abrir ${KIBANA_URL} >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo 2. Ir a Management - Data Views >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo 3. Crear data view: ${ELASTIC_INDEX}-* >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo 4. Ir a Analytics - Discover >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo 5. Explorar datos de seguridad >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo QUERIES UTILES: >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo risk_level:"High" >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo scan_type:"frontend_security" >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo build_number:"${BUILD_NUMBER}" >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo TIEMPO ESTIMADO OPTIMIZADO: >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo Primera ejecucion: 10-15 min >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo Ejecuciones siguientes: 5-8 min >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                        echo PIPELINE ELK OPTIMIZADO COMPLETADO >> ${REPORTS_DIR}\\REPORTE-ELK.txt
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                archiveArtifacts artifacts: "${REPORTS_DIR}/**", allowEmptyArchive: true
                archiveArtifacts artifacts: "${ELK_DIR}/**", allowEmptyArchive: true
                
                echo """
                ===============================================
                   PRESTABANCO ELK OPTIMIZADO COMPLETED
                ===============================================
                
                OPTIMIZACIONES APLICADAS:
                   - Healthchecks en lugar de sleeps ciegos
                   - WaitUntil con timeout inteligente
                   - Verificacion por reintentos 10x15s
                   - Solo sleep cuando es absolutamente necesario
                   - Verificacion de estado antes de scans
                   - PowerShell corregido para envio datos
                
                SERVICIOS:
                   Frontend:      ${env.FRONTEND_OK == 'true' ? 'OK' : 'FAIL'} - ${FRONTEND_URL}
                   Backend:       ${env.BACKEND_OK == 'true' ? 'OK' : 'FAIL'} - ${BACKEND_URL}
                   Elasticsearch: ${env.ELASTIC_OK == 'true' ? 'OK' : 'FAIL'} - ${ELASTICSEARCH_URL}
                   Kibana:        ${env.KIBANA_OK == 'true' ? 'OK' : 'FAIL'} - ${KIBANA_URL}
                
                TIEMPO MEJORADO:
                   Primera vez: ~10-15 min (25% mas rapido)
                   Siguientes:  ~5-8 min (50% mas rapido)
                
                ACCESO:
                   Kibana: ${KIBANA_URL}
                   Reportes: ${BUILD_URL}artifact/${REPORTS_DIR}/
                
                PROXIMOS PASOS:
                   1. Abrir Kibana
                   2. Crear Data View: prestabanco-security-*
                   3. Ir a Discover
                   4. Explorar datos de seguridad
                ===============================================
                """
            }
        }
        success {
            echo "Pipeline ELK optimizado completado exitosamente!"
        }
        unstable {
            echo "Pipeline completado con warnings"
        }
        failure {
            echo "Pipeline fallo - revisar logs"
        }
    }
}