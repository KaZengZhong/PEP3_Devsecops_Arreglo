pipeline {
    agent any
    
    parameters {
        booleanParam(
            name: 'RESTART_ELK',
            defaultValue: false,
            description: 'Forzar reinicio completo del stack ELK'
        )
        booleanParam(
            name: 'RESET_DATA',
            defaultValue: false,
            description: '‚ö†Ô∏è CUIDADO: Eliminar todos los datos de ELK'
        )
    }
    
    environment {
        KIBANA_URL = 'http://localhost:5601'
        ELASTICSEARCH_URL = 'http://localhost:9200'
        COMPOSE_FILE = 'compose2.yml'
    }
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "=== PRESTABANCO ELK STACK CON FILEBEAT ==="
                    echo "üéØ Objetivo: Monitoreo autom√°tico con Filebeat"
                    echo "üìä Stack: Elasticsearch + Kibana + Filebeat"
                    echo "‚úÖ Ventaja: NO requiere configuraci√≥n compleja"
                }
            }
        }
        
        stage('Check Current State') {
            steps {
                script {
                    def elkRunning = false
                    
                    try {
                        def result = bat(script: 'docker ps --filter "name=elasticsearch" --filter "name=kibana" --format "{{.Names}}"', returnStdout: true).trim()
                        def runningContainers = result.split('\n').findAll { it.trim() }
                        
                        if (runningContainers.size() >= 2) {
                            elkRunning = true
                            echo "‚úÖ ELK Stack ya est√° corriendo"
                        } else {
                            echo "üîÑ ELK Stack necesita ser iniciado"
                        }
                        
                    } catch (Exception e) {
                        echo "No se pudo verificar estado actual"
                    }
                    
                    env.ELK_RUNNING = elkRunning.toString()
                }
            }
        }
        
        stage('Cleanup Data') {
            when {
                expression { params.RESET_DATA }
            }
            steps {
                script {
                    echo "‚ö†Ô∏è ELIMINANDO TODOS LOS DATOS DE ELK..."
                    
                    bat "docker-compose -f ${env.COMPOSE_FILE} down -v"
                    
                    try {
                        bat 'docker volume rm elk_elasticsearch_data'
                    } catch (Exception e) {
                        echo "Volume ya eliminado o no existe"
                    }
                    
                    echo "üóëÔ∏è Datos de ELK eliminados"
                }
            }
        }
        
        stage('Deploy ELK Stack with Filebeat') {
            when {
                anyOf {
                    expression { params.RESTART_ELK }
                    expression { params.RESET_DATA }
                    expression { env.ELK_RUNNING == 'false' }
                }
            }
            steps {
                script {
                    if (params.RESTART_ELK && !params.RESET_DATA) {
                        echo "üîÑ Reiniciando ELK Stack..."
                        bat "docker-compose -f ${env.COMPOSE_FILE} stop"
                        bat "docker-compose -f ${env.COMPOSE_FILE} rm -f"
                    }
                    
                    echo "üöÄ Iniciando aplicaci√≥n PrestaBanco..."
                    bat "docker-compose -f ${env.COMPOSE_FILE} up -d postgres backend frontend"
                    sleep(time: 30, unit: 'SECONDS')
                    
                    echo "üîç Iniciando Elasticsearch..."
                    bat "docker-compose -f ${env.COMPOSE_FILE} up -d elasticsearch"
                    sleep(time: 60, unit: 'SECONDS')
                    
                    echo "üìä Iniciando Kibana..."
                    bat "docker-compose -f ${env.COMPOSE_FILE} up -d kibana"
                    sleep(time: 45, unit: 'SECONDS')
                    
                    echo "üìÅ Iniciando Filebeat (recolector autom√°tico)..."
                    bat "docker-compose -f ${env.COMPOSE_FILE} up -d filebeat"
                    sleep(time: 20, unit: 'SECONDS')
                }
            }
        }
        
        stage('Start Missing Services') {
            when {
                expression { env.ELK_RUNNING == 'true' && !params.RESTART_ELK }
            }
            steps {
                script {
                    echo "üîç Verificando servicios ELK existentes..."
                    
                    try {
                        bat "docker-compose -f ${env.COMPOSE_FILE} up -d"
                        sleep(time: 30, unit: 'SECONDS')
                        echo "‚úÖ Servicios ELK verificados/iniciados"
                    } catch (Exception e) {
                        echo "Warning: Error verificando servicios - ${e.message}"
                    }
                }
            }
        }
        
        stage('Verify ELK Health') {
            steps {
                script {
                    def elasticsearchOk = false
                    def kibanaOk = false
                    def filebeatOk = false
                    
                    echo "üîç Verificando salud del stack ELK con Filebeat..."
                    bat 'docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"'
                    
                    // Elasticsearch
                    try {
                        bat 'powershell -Command "Invoke-WebRequest -Uri http://localhost:9200/_cluster/health -TimeoutSec 20 -UseBasicParsing | Out-Null"'
                        elasticsearchOk = true
                        echo "‚úÖ Elasticsearch: HEALTHY"
                    } catch (Exception e) {
                        echo "‚ùå Elasticsearch: FAILED"
                        try {
                            bat 'docker logs elasticsearch --tail 10'
                        } catch (Exception logError) {
                            echo "No se pudieron obtener logs de Elasticsearch"
                        }
                    }
                    
                    // Kibana
                    try {
                        bat 'powershell -Command "Invoke-WebRequest -Uri http://localhost:5601 -TimeoutSec 25 -UseBasicParsing | Out-Null"'
                        kibanaOk = true
                        echo "‚úÖ Kibana: HEALTHY"
                    } catch (Exception e) {
                        echo "‚ùå Kibana: FAILED"
                        try {
                            bat 'docker logs kibana --tail 10'
                        } catch (Exception logError) {
                            echo "No se pudieron obtener logs de Kibana"
                        }
                    }
                    
                    // Filebeat
                    try {
                        def filebeatStatus = bat(script: 'docker ps --filter "name=filebeat" --format "{{.Status}}"', returnStdout: true).trim()
                        if (filebeatStatus.contains("Up")) {
                            filebeatOk = true
                            echo "‚úÖ Filebeat: RUNNING (recolectando logs autom√°ticamente)"
                        } else {
                            echo "‚ùå Filebeat: NOT RUNNING"
                        }
                    } catch (Exception e) {
                        echo "‚ùå Filebeat: FAILED"
                    }
                    
                    env.ELASTICSEARCH_OK = elasticsearchOk.toString()
                    env.KIBANA_OK = kibanaOk.toString()
                    env.FILEBEAT_OK = filebeatOk.toString()
                    env.ELK_HEALTHY = (elasticsearchOk && kibanaOk && filebeatOk).toString()
                }
            }
        }
        
        stage('Configure Kibana Index Patterns') {
            when {
                expression { env.ELASTICSEARCH_OK == 'true' && env.KIBANA_OK == 'true' }
            }
            steps {
                script {
                    echo "‚öôÔ∏è Configurando Kibana para PrestaBanco..."
                    
                    try {
                        // Esperar a que Kibana est√© completamente listo
                        sleep(time: 30, unit: 'SECONDS')
                        
                        // Crear index pattern para logs de PrestaBanco
                        bat '''
                            powershell -Command "
                            # Esperar a que haya datos
                            Start-Sleep -Seconds 10
                            
                            # Crear index pattern
                            $indexPattern = @{
                                attributes = @{
                                    title = 'prestabanco-logs-*'
                                    timeFieldName = '@timestamp'
                                }
                            } | ConvertTo-Json -Depth 5
                            
                            try {
                                Invoke-RestMethod -Uri 'http://localhost:5601/api/saved_objects/index-pattern/prestabanco-logs' -Method POST -Body $indexPattern -ContentType 'application/json' -Headers @{'kbn-xsrf'='true'}
                                Write-Host 'Index pattern creado para prestabanco-logs-*'
                            } catch {
                                Write-Host 'Index pattern ya existe o ser√° creado autom√°ticamente'
                            }
                            "
                        '''
                        
                        echo "‚úÖ Kibana configurado para PrestaBanco"
                        
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Warning: Error en configuraci√≥n de Kibana - ${e.message}"
                        echo "üí° Los index patterns se pueden crear manualmente en Kibana"
                    }
                }
            }
        }
        
        stage('Generate Test Logs') {
            when {
                expression { env.ELK_HEALTHY == 'true' }
            }
            steps {
                script {
                    echo "üß™ Generando logs de prueba..."
                    
                    try {
                        // Generar tr√°fico en la aplicaci√≥n
                        bat '''
                            powershell -Command "
                            Write-Host 'Generando tr√°fico en Frontend...'
                            try { Invoke-WebRequest -Uri 'http://localhost:8070' -UseBasicParsing | Out-Null; Write-Host 'Frontend: OK' } catch { Write-Host 'Frontend no disponible a√∫n' }
                            
                            Write-Host 'Generando tr√°fico en Backend...'
                            try { Invoke-WebRequest -Uri 'http://localhost:8090/actuator/health' -UseBasicParsing | Out-Null; Write-Host 'Backend: OK' } catch { Write-Host 'Backend no disponible a√∫n' }
                            
                            Write-Host 'Esperando que Filebeat procese los logs...'
                            Start-Sleep -Seconds 30
                            "
                        '''
                        
                        // Verificar que los logs llegaron a Elasticsearch
                        bat '''
                            powershell -Command "
                            $indices = Invoke-WebRequest -Uri 'http://localhost:9200/_cat/indices?v' -UseBasicParsing
                            Write-Host '√çndices disponibles:'
                            Write-Host $indices.Content
                            
                            try {
                                $search = Invoke-WebRequest -Uri 'http://localhost:9200/prestabanco-logs-*/_search?size=5&pretty' -UseBasicParsing
                                Write-Host 'Logs encontrados en Elasticsearch:'
                                Write-Host $search.Content
                            } catch {
                                Write-Host 'A√∫n no hay logs o √≠ndice no creado'
                            }
                            "
                        '''
                        
                        echo "‚úÖ Test de logs completado"
                        
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Warning: Error en test de logs - ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo """
                =====================================
                  PRESTABANCO ELK + FILEBEAT STATUS
                =====================================
                
                üìä COMPONENTES:
                  Elasticsearch: ${env.ELASTICSEARCH_OK == 'true' ? '‚úÖ ACTIVO' : '‚ùå INACTIVO'}
                  Kibana:        ${env.KIBANA_OK == 'true' ? '‚úÖ DISPONIBLE' : '‚ùå NO DISPONIBLE'}
                  Filebeat:      ${env.FILEBEAT_OK == 'true' ? '‚úÖ RECOLECTANDO' : '‚ùå INACTIVO'}
                
                üåê ACCESO:
                  üìà Elasticsearch API: ${env.ELASTICSEARCH_OK == 'true' ? 'http://localhost:9200' : 'NO DISPONIBLE'}
                  üìä Kibana Dashboard: ${env.KIBANA_OK == 'true' ? 'http://localhost:5601' : 'NO DISPONIBLE'}
                
                üìã LOGS AUTOM√ÅTICOS:
                  üîÑ Filebeat recolecta logs de TODOS los contenedores autom√°ticamente
                  üìÅ √çndice: prestabanco-logs-YYYY.MM.dd
                  üéØ No requiere configuraci√≥n manual de logging
                
                üéØ ESTADO GENERAL: ${env.ELK_HEALTHY == 'true' ? '‚úÖ ELK + FILEBEAT OPERATIVO' : '‚ö†Ô∏è REQUIERE ATENCI√ìN'}
                
                üìù PR√ìXIMOS PASOS:
                  1. Abrir Kibana: http://localhost:5601
                  2. Ir a 'Discover' para ver logs en tiempo real
                  3. Crear visualizaciones y dashboards
                  4. Los logs se recolectan autom√°ticamente
                
                üí° VENTAJAS DE FILEBEAT:
                  ‚úÖ Configuraci√≥n m√≠nima
                  ‚úÖ Recolecci√≥n autom√°tica
                  ‚úÖ Sin archivos de configuraci√≥n externos
                  ‚úÖ Funciona out-of-the-box
                =====================================
                """
            }
        }
        
        success {
            script {
                if (env.ELK_HEALTHY == 'true') {
                    echo "üéâ ELK + FILEBEAT CONFIGURADO Y OPERATIVO"
                    echo "üìä Dashboard disponible en: http://localhost:5601"
                    echo "üîÑ Logs recolect√°ndose autom√°ticamente"
                } else {
                    echo "‚ö†Ô∏è ELK + FILEBEAT PARCIALMENTE CONFIGURADO"
                    echo "üîß Revisar logs para diagn√≥stico"
                }
            }
        }
        
        failure {
            echo "‚ùå ERROR EN CONFIGURACI√ìN DE ELK + FILEBEAT"
        }
        
        unstable {
            echo "‚ö†Ô∏è ELK + FILEBEAT CONFIGURADO CON WARNINGS"
        }
    }
}