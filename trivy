pipeline {
    agent any
    
    parameters {
        choice(
            name: 'SCAN_TYPE',
            choices: ['STANDARD', 'QUICK', 'COMPREHENSIVE'],
            description: 'Tipo de escaneo de seguridad'
        )
    }
    
    environment {
        REPORTS_DIR = 'security-reports'
        FRONTEND_IMAGE = 'kahaozeng/prestabanco-frontend:latest'
        BACKEND_IMAGE = 'kahaozeng/prestabanco-backend:latest'
    }
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "Iniciando pipeline de seguridad con Trivy"
                    echo "Tipo de escaneo: ${params.SCAN_TYPE}"
                    
                    bat "if not exist ${REPORTS_DIR} mkdir ${REPORTS_DIR}"
                }
            }
        }
        
        stage('Trivy Security Scan') {
            parallel {
                stage('Frontend Scan') {
                    steps {
                        script {
                            echo "Escaneando Frontend..."
                            
                            def severity = getSeverityLevel(params.SCAN_TYPE)
                            
                            bat """
                                docker run --rm ^
                                    -v /var/run/docker.sock:/var/run/docker.sock ^
                                    -v %cd%\\${REPORTS_DIR}:/reports ^
                                    aquasec/trivy:latest image ^
                                    ${FRONTEND_IMAGE} ^
                                    --format json ^
                                    --severity ${severity} ^
                                    --output /reports/frontend-trivy.json ^
                                    --exit-code 0
                            """
                            
                            echo "Frontend scan completado"
                        }
                    }
                }
                
                stage('Backend Scan') {
                    steps {
                        script {
                            echo "Escaneando Backend..."
                            
                            def severity = getSeverityLevel(params.SCAN_TYPE)
                            
                            bat """
                                docker run --rm ^
                                    -v /var/run/docker.sock:/var/run/docker.sock ^
                                    -v %cd%\\${REPORTS_DIR}:/reports ^
                                    aquasec/trivy:latest image ^
                                    ${BACKEND_IMAGE} ^
                                    --format json ^
                                    --severity ${severity} ^
                                    --output /reports/backend-trivy.json ^
                                    --exit-code 0
                            """
                            
                            echo "Backend scan completado"
                        }
                    }
                }
            }
        }
        
        stage('Generate Summary') {
            steps {
                script {
                    echo "Generando resumen de seguridad..."
                    
                    bat """
                        echo TRIVY SECURITY SCAN RESULTS > ${REPORTS_DIR}\\summary.txt
                        echo ================================ >> ${REPORTS_DIR}\\summary.txt
                        echo. >> ${REPORTS_DIR}\\summary.txt
                        echo Scan Date: %date% %time% >> ${REPORTS_DIR}\\summary.txt
                        echo Images Scanned: >> ${REPORTS_DIR}\\summary.txt
                        echo   Frontend: ${FRONTEND_IMAGE} >> ${REPORTS_DIR}\\summary.txt
                        echo   Backend: ${BACKEND_IMAGE} >> ${REPORTS_DIR}\\summary.txt
                        echo. >> ${REPORTS_DIR}\\summary.txt
                        echo Severity Filter: ${params.SCAN_TYPE} >> ${REPORTS_DIR}\\summary.txt
                        echo. >> ${REPORTS_DIR}\\summary.txt
                        echo Results available in JSON files: >> ${REPORTS_DIR}\\summary.txt
                        echo   - frontend-trivy.json >> ${REPORTS_DIR}\\summary.txt
                        echo   - backend-trivy.json >> ${REPORTS_DIR}\\summary.txt
                        echo. >> ${REPORTS_DIR}\\summary.txt
                        echo Pipeline completed successfully >> ${REPORTS_DIR}\\summary.txt
                    """
                }
            }
        }
        
        stage('Archive Results') {
            steps {
                script {
                    echo "Archivando resultados..."
                    
                    bat """
                        echo Files generated: > ${REPORTS_DIR}\\files.txt
                        dir ${REPORTS_DIR} >> ${REPORTS_DIR}\\files.txt
                    """
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: "${REPORTS_DIR}/**/*", fingerprint: true
            echo "Pipeline de seguridad completado"
        }
        success {
            echo "Trivy security scan completed successfully"
        }
        failure {
            echo "Pipeline encountered issues but reports may still be available"
        }
    }
}

def getSeverityLevel(scanType) {
    switch(scanType) {
        case 'QUICK':
            return 'CRITICAL'
        case 'STANDARD':
            return 'CRITICAL,HIGH'
        case 'COMPREHENSIVE':
            return 'CRITICAL,HIGH,MEDIUM,LOW'
        default:
            return 'CRITICAL,HIGH'
    }
}