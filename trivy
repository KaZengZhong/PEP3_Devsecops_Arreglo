pipeline {
    agent any
    
    parameters {
        choice(
            name: 'SCAN_TYPE',
            choices: ['QUICK', 'STANDARD', 'COMPREHENSIVE'],
            description: 'Tipo de escaneo de seguridad'
        )
        booleanParam(
            name: 'GENERATE_REPORTS',
            defaultValue: true,
            description: 'Generar reportes de seguridad'
        )
    }
    
    environment {
        REPORTS_DIR = 'security-reports'
        FRONTEND_IMAGE = 'kahaozeng/prestabanco-frontend:latest'
        BACKEND_IMAGE = 'kahaozeng/prestabanco-backend:latest'
        TRIVY_NO_PROGRESS = 'true'
        TRIVY_QUIET = 'true'
    }
    
    stages {
        stage('Initialize Security Scan') {
            steps {
                script {
                    echo "Iniciando pipeline de seguridad con Trivy"
                    echo "Tipo de escaneo: ${params.SCAN_TYPE}"
                    echo "Generar reportes: ${params.GENERATE_REPORTS}"
                    
                    // Crear directorio de reportes
                    bat "if not exist ${REPORTS_DIR} mkdir ${REPORTS_DIR}"
                }
            }
        }
        
        stage('Download Security Database') {
            steps {
                script {
                    echo "Descargando base de datos de vulnerabilidades de Trivy..."
                    
                    bat """
                        docker run --rm ^
                            -v %cd%\\${REPORTS_DIR}:/reports ^
                            aquasec/trivy:latest image ^
                            --download-db-only ^
                            --cache-dir /reports/.trivy
                    """
                    
                    echo "Base de datos de seguridad actualizada"
                }
            }
        }
        
        stage('Container Security Scan with Trivy') {
            parallel {
                stage('Trivy Scan - Frontend') {
                    steps {
                        script {
                            echo "Escaneando Frontend con Trivy..."
                            
                            def severity = getSeverityLevel(params.SCAN_TYPE)
                            
                            // Solo generar JSON (sin problemas de encoding)
                            bat """
                                docker run --rm ^
                                    -v /var/run/docker.sock:/var/run/docker.sock ^
                                    -v %cd%\\${REPORTS_DIR}:/reports ^
                                    aquasec/trivy:latest image ^
                                    ${FRONTEND_IMAGE} ^
                                    --format json ^
                                    --severity ${severity} ^
                                    --output /reports/frontend-trivy.json ^
                                    --exit-code 0 || echo "Frontend scan completed"
                            """
                            
                            // Generar reporte legible en texto plano
                            bat """
                                echo Frontend Security Scan Results > ${REPORTS_DIR}\\frontend-summary.txt
                                echo ================================ >> ${REPORTS_DIR}\\frontend-summary.txt
                                echo Image: ${FRONTEND_IMAGE} >> ${REPORTS_DIR}\\frontend-summary.txt
                                echo Severity Filter: ${severity} >> ${REPORTS_DIR}\\frontend-summary.txt
                                echo Scan Date: %date% %time% >> ${REPORTS_DIR}\\frontend-summary.txt
                                echo. >> ${REPORTS_DIR}\\frontend-summary.txt
                                echo See frontend-trivy.json for detailed vulnerability data >> ${REPORTS_DIR}\\frontend-summary.txt
                            """
                            
                            echo "Frontend scan completado"
                        }
                    }
                }
                
                stage('Trivy Scan - Backend') {
                    steps {
                        script {
                            echo "Escaneando Backend con Trivy..."
                            
                            def severity = getSeverityLevel(params.SCAN_TYPE)
                            
                            // Solo generar JSON (sin problemas de encoding)
                            bat """
                                docker run --rm ^
                                    -v /var/run/docker.sock:/var/run/docker.sock ^
                                    -v %cd%\\${REPORTS_DIR}:/reports ^
                                    aquasec/trivy:latest image ^
                                    ${BACKEND_IMAGE} ^
                                    --format json ^
                                    --severity ${severity} ^
                                    --output /reports/backend-trivy.json ^
                                    --exit-code 0 || echo "Backend scan completed"
                            """
                            
                            // Generar reporte legible en texto plano
                            bat """
                                echo Backend Security Scan Results > ${REPORTS_DIR}\\backend-summary.txt
                                echo =============================== >> ${REPORTS_DIR}\\backend-summary.txt
                                echo Image: ${BACKEND_IMAGE} >> ${REPORTS_DIR}\\backend-summary.txt
                                echo Severity Filter: ${severity} >> ${REPORTS_DIR}\\backend-summary.txt
                                echo Scan Date: %date% %time% >> ${REPORTS_DIR}\\backend-summary.txt
                                echo. >> ${REPORTS_DIR}\\backend-summary.txt
                                echo See backend-trivy.json for detailed vulnerability data >> ${REPORTS_DIR}\\backend-summary.txt
                            """
                            
                            echo "Backend scan completado"
                        }
                    }
                }
            }
        }
        
        stage('Generate Security Report') {
            when {
                expression { params.GENERATE_REPORTS }
            }
            steps {
                script {
                    echo "Generando reporte consolidado de seguridad..."
                    
                    bat """
                        echo ^<!DOCTYPE html^> > ${REPORTS_DIR}\\security-summary.html
                        echo ^<html^>^<head^>^<title^>Trivy Security Report^</title^> >> ${REPORTS_DIR}\\security-summary.html
                        echo ^<style^>body{font-family:Arial;margin:20px;}h1{color:#333;}table{border-collapse:collapse;width:100%%;}th,td{border:1px solid #ddd;padding:8px;text-align:left;}th{background-color:#f2f2f2;}.critical{color:#d32f2f;}.high{color:#f57c00;}.medium{color:#fbc02d;}.low{color:#388e3c;}^</style^> >> ${REPORTS_DIR}\\security-summary.html
                        echo ^</head^>^<body^> >> ${REPORTS_DIR}\\security-summary.html
                        echo ^<h1^>Trivy Container Security Report^</h1^> >> ${REPORTS_DIR}\\security-summary.html
                        echo ^<h2^>Scan Summary^</h2^> >> ${REPORTS_DIR}\\security-summary.html
                        echo ^<p^>Scan Type: ${params.SCAN_TYPE}^</p^> >> ${REPORTS_DIR}\\security-summary.html
                        echo ^<p^>Date: %date% %time%^</p^> >> ${REPORTS_DIR}\\security-summary.html
                        echo ^<p^>Images Scanned: ${FRONTEND_IMAGE}, ${BACKEND_IMAGE}^</p^> >> ${REPORTS_DIR}\\security-summary.html
                        echo ^<h2^>Results^</h2^> >> ${REPORTS_DIR}\\security-summary.html
                        echo ^<p^>Frontend scan results available in: frontend-trivy-table.txt^</p^> >> ${REPORTS_DIR}\\security-summary.html
                        echo ^<p^>Backend scan results available in: backend-trivy-table.txt^</p^> >> ${REPORTS_DIR}\\security-summary.html
                        echo ^<p^>Detailed JSON reports also generated for further analysis.^</p^> >> ${REPORTS_DIR}\\security-summary.html
                        echo ^</body^>^</html^> >> ${REPORTS_DIR}\\security-summary.html
                    """
                }
            }
        }
        
        stage('Archive Reports') {
            steps {
                script {
                    echo "Guardando los archivos generados"
                    
                    // Crear un resumen de archivos
                    bat """
                        echo Trivy Security Scan Results > ${REPORTS_DIR}\\README.txt
                        echo ================================ >> ${REPORTS_DIR}\\README.txt
                        echo. >> ${REPORTS_DIR}\\README.txt
                        echo Generated on: %date% %time% >> ${REPORTS_DIR}\\README.txt
                        echo Scan Type: ${params.SCAN_TYPE} >> ${REPORTS_DIR}\\README.txt
                        echo. >> ${REPORTS_DIR}\\README.txt
                        echo Files in this report: >> ${REPORTS_DIR}\\README.txt
                        dir ${REPORTS_DIR} /B >> ${REPORTS_DIR}\\README.txt
                    """
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: "${REPORTS_DIR}/**/*", fingerprint: true
            echo "Security report generated and archived successfully"
        }
        success {
            echo "Trivy security pipeline completed successfully"
        }
        failure {
            echo "Trivy security pipeline encountered issues but reports were generated"
        }
    }
}

def getSeverityLevel(scanType) {
    switch(scanType) {
        case 'QUICK':
            return 'CRITICAL'
        case 'STANDARD':
            return 'CRITICAL,HIGH'
        case 'COMPREHENSIVE':
            return 'CRITICAL,HIGH,MEDIUM,LOW'
        default:
            return 'CRITICAL,HIGH'
    }
}