
pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ACTION',
            choices: ['DEPLOY', 'STATUS', 'LOGS', 'RESTART'],
            description: 'Acción a realizar'
        )
        choice(
            name: 'SERVICE',
            choices: ['ALL', 'FRONTEND', 'BACKEND', 'POSTGRES', 'PORTAINER'],
            description: 'Servicio específico'
        )
    }
    
    environment {
        REPORTS_DIR = 'portainer-management'
        PORTAINER_URL = 'http://localhost:9000'
        FRONTEND_URL = 'http://localhost:8070'
        BACKEND_URL = 'http://localhost:8090'
    }
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "=== PRESTABANCO MANAGEMENT ==="
                    
                    bat """
                        if exist ${REPORTS_DIR} rmdir /s /q ${REPORTS_DIR}
                        mkdir ${REPORTS_DIR}
                    """
                }
            }
        }
        
        stage('Deploy Portainer') {
            when {
                expression { params.ACTION == 'DEPLOY' }
            }
            steps {
                script {
                    echo "Desplegando Portainer..."
                    
                    // Crear docker-compose simple
                    bat """
                        echo version: '3.8' > ${REPORTS_DIR}\\docker-compose.yml
                        echo. >> ${REPORTS_DIR}\\docker-compose.yml
                        echo services: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo   # Portainer >> ${REPORTS_DIR}\\docker-compose.yml
                        echo   portainer: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     image: portainer/portainer-ce:latest >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     container_name: portainer >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     ports: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       - "9000:9000" >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     volumes: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       - /var/run/docker.sock:/var/run/docker.sock >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       - portainer_data:/data >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     restart: unless-stopped >> ${REPORTS_DIR}\\docker-compose.yml
                        echo. >> ${REPORTS_DIR}\\docker-compose.yml
                        echo   # Frontend >> ${REPORTS_DIR}\\docker-compose.yml
                        echo   frontend: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     image: kahaozeng/prestabanco-frontend:latest >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     container_name: prestabanco-frontend >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     ports: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       - "8070:80" >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     depends_on: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       - backend >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     networks: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       - app-network >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     restart: unless-stopped >> ${REPORTS_DIR}\\docker-compose.yml
                        echo. >> ${REPORTS_DIR}\\docker-compose.yml
                        echo   # Backend >> ${REPORTS_DIR}\\docker-compose.yml
                        echo   backend: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     image: kahaozeng/prestabanco-backend:latest >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     container_name: prestabanco-backend >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     environment: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       DB_HOST: postgres >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/prestabanco >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       SPRING_DATASOURCE_USERNAME: postgres >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       SPRING_DATASOURCE_PASSWORD: admin >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       SPRING_JPA_SHOW_SQL: "true" >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       SPRING_JPA_HIBERNATE_DDL_AUTO: "update" >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     ports: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       - "8090:8090" >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     depends_on: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       - postgres >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     networks: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       - app-network >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     restart: unless-stopped >> ${REPORTS_DIR}\\docker-compose.yml
                        echo. >> ${REPORTS_DIR}\\docker-compose.yml
                        echo   # PostgreSQL >> ${REPORTS_DIR}\\docker-compose.yml
                        echo   postgres: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     image: postgres:latest >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     container_name: prestabanco-postgres >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     environment: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       POSTGRES_DB: prestabanco >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       POSTGRES_USER: postgres >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       POSTGRES_PASSWORD: admin >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     ports: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       - "0.0.0.0:5433:5432" >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     volumes: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       - postgres:/var/lib/postgresql/data >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     networks: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo       - app-network >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     restart: unless-stopped >> ${REPORTS_DIR}\\docker-compose.yml
                        echo. >> ${REPORTS_DIR}\\docker-compose.yml
                        echo networks: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo   app-network: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     driver: bridge >> ${REPORTS_DIR}\\docker-compose.yml
                        echo. >> ${REPORTS_DIR}\\docker-compose.yml
                        echo volumes: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo   portainer_data: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo   postgres: >> ${REPORTS_DIR}\\docker-compose.yml
                        echo     external: true >> ${REPORTS_DIR}\\docker-compose.yml
                    """
                    
                    // Desplegar stack completo
                    bat """
                        cd ${REPORTS_DIR}
                        docker-compose down || echo "No containers running"
                        docker-compose up -d
                    """
                    
                    sleep(time: 30, unit: 'SECONDS')
                }
            }
        }
        
        stage('Verify Services') {
            steps {
                script {
                    echo "Verificando servicios..."
                    
                    def portainerOk = false
                    def frontendOk = false
                    def backendOk = false
                    
                    // Verificar Portainer
                    try {
                        bat 'powershell -Command "Invoke-WebRequest -Uri http://localhost:9000 -TimeoutSec 10 -UseBasicParsing | Out-Null"'
                        portainerOk = true
                        echo "✅ Portainer: OK"
                    } catch (Exception e) {
                        echo "❌ Portainer: FAILED"
                    }
                    
                    // Verificar Frontend
                    try {
                        bat 'powershell -Command "Invoke-WebRequest -Uri http://localhost:8070 -TimeoutSec 10 -UseBasicParsing | Out-Null"'
                        frontendOk = true
                        echo "✅ Frontend: OK"
                    } catch (Exception e) {
                        echo "❌ Frontend: FAILED"
                    }
                    
                    // Verificar Backend
                    try {
                        bat 'powershell -Command "Test-NetConnection -ComputerName localhost -Port 8090 -WarningAction SilentlyContinue"'
                        backendOk = true
                        echo "✅ Backend: OK"
                    } catch (Exception e) {
                        echo "❌ Backend: FAILED"
                    }
                    
                    env.PORTAINER_OK = portainerOk.toString()
                    env.FRONTEND_OK = frontendOk.toString()
                    env.BACKEND_OK = backendOk.toString()
                }
            }
        }
        
        stage('Get Container Status') {
            when {
                expression { params.ACTION == 'STATUS' }
            }
            steps {
                script {
                    echo "Obteniendo estado de contenedores..."
                    
                    bat """
                        echo ESTADO DE CONTENEDORES > ${REPORTS_DIR}\\container-status.txt
                        echo ====================== >> ${REPORTS_DIR}\\container-status.txt
                        echo. >> ${REPORTS_DIR}\\container-status.txt
                        docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}" >> ${REPORTS_DIR}\\container-status.txt
                        echo. >> ${REPORTS_DIR}\\container-status.txt
                        echo RECURSOS UTILIZADOS >> ${REPORTS_DIR}\\container-status.txt
                        echo ================== >> ${REPORTS_DIR}\\container-status.txt
                        docker stats --no-stream --format "table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}" >> ${REPORTS_DIR}\\container-status.txt
                    """
                }
            }
        }
        
        stage('Collect Logs') {
            when {
                expression { params.ACTION == 'LOGS' }
            }
            steps {
                script {
                    echo "Recolectando logs..."
                    
                    def service = params.SERVICE.toLowerCase()
                    
                    if (service == 'all' || service == 'frontend') {
                        bat "docker logs prestabanco-frontend --tail=100 > ${REPORTS_DIR}\\frontend-logs.txt 2>&1 || echo 'No logs available'"
                    }
                    
                    if (service == 'all' || service == 'backend') {
                        bat "docker logs prestabanco-backend --tail=100 > ${REPORTS_DIR}\\backend-logs.txt 2>&1 || echo 'No logs available'"
                    }
                    
                    if (service == 'all' || service == 'postgres') {
                        bat "docker logs prestabanco-postgres --tail=100 > ${REPORTS_DIR}\\postgres-logs.txt 2>&1 || echo 'No logs available'"
                    }
                    
                    if (service == 'all' || service == 'portainer') {
                        bat "docker logs portainer --tail=100 > ${REPORTS_DIR}\\portainer-logs.txt 2>&1 || echo 'No logs available'"
                    }
                }
            }
        }
        
        stage('Restart Service') {
            when {
                expression { params.ACTION == 'RESTART' }
            }
            steps {
                script {
                    echo "Reiniciando servicio: ${params.SERVICE}"
                    
                    def service = params.SERVICE.toLowerCase()
                    
                    if (service == 'all') {
                        bat """
                            cd ${REPORTS_DIR}
                            docker-compose restart
                        """
                    } else {
                        def serviceMap = [
                            'frontend': 'prestabanco-frontend',
                            'backend': 'prestabanco-backend', 
                            'postgres': 'prestabanco-postgres',
                            'portainer': 'portainer'
                        ]
                        
                        def containerName = serviceMap[service]
                        if (containerName) {
                            bat "docker restart ${containerName}"
                        }
                    }
                }
            }
        }
        
        stage('Generate Report') {
            steps {
                script {
                    echo "Generando reporte..."
                    
                    bat """
                        echo ===================================== > ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo    PRESTABANCO MANAGEMENT REPORT    >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo ===================================== >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo Fecha: %date% %time% >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo Build: ${BUILD_NUMBER} >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo Accion: ${params.ACTION} >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo Servicio: ${params.SERVICE} >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo SERVICIOS DISPONIBLES: >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   Portainer:   ${PORTAINER_URL} >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   Frontend:    ${FRONTEND_URL} >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   Backend:     ${BACKEND_URL} >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   Database:    localhost:5433 >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo ESTADO ACTUAL: >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        docker ps --format "  {{.Names}} - {{.Status}}" >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo COMO USAR PORTAINER: >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   1. Ir a: ${PORTAINER_URL} >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   2. Crear usuario admin (primera vez) >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   3. Gestionar contenedores desde UI web >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   4. Ver logs, estadisticas y monitoreo >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo FUNCIONES DISPONIBLES: >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   - Deploy/Stop contenedores >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   - Ver logs en tiempo real >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   - Monitoreo de recursos >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   - Gestion de volumenes >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   - Estadisticas de uso >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo INTEGRACION CON DEVSECOPS: >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   Etapa: OPERATE/MONITOR >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   Categoria: Gestion de contenedores >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo   Beneficios: UI simple, logs centralizados >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                        echo OPERACION COMPLETADA EXITOSAMENTE >> ${REPORTS_DIR}\\REPORTE-MANAGEMENT.txt
                    """
                    
                    currentBuild.result = 'SUCCESS'
                }
            }
        }
    }
    
    post {
        always {
            script {
                archiveArtifacts artifacts: "${REPORTS_DIR}/**", allowEmptyArchive: true
                
                echo """
                =====================================
                    PRESTABANCO MANAGEMENT
                =====================================
                
                ACCION: ${params.ACTION}
                SERVICIO: ${params.SERVICE}
                
                ACCESO A PORTAINER:
                  URL: ${PORTAINER_URL}
                  Funciones: UI Web para Docker
                
                APLICACIONES:
                  Frontend: ${FRONTEND_URL}
                  Backend:  ${BACKEND_URL}
                  Database: localhost:5433
                
                ARCHIVOS: ${BUILD_URL}artifact/${REPORTS_DIR}/
                
                ESTADO: ${currentBuild.result}
                =====================================
                """
            }
        }
        
        success {
            echo "✅ Operación completada exitosamente"
        }
        
        failure {
            echo "❌ Error en la operación"
        }
    }