pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ACTION',
            choices: ['DEPLOY', 'STATUS', 'LOGS', 'RESTART'],
            description: 'Acción a realizar'
        )
        choice(
            name: 'SERVICE',
            choices: ['ALL', 'FRONTEND', 'BACKEND', 'POSTGRES'],
            description: 'Servicio específico'
        )
    }
    
    environment {
        REPORTS_DIR = 'management-reports'
    }
    
    stages {
        stage('Execute Action') {
            steps {
                script {
                    echo "=== PRESTABANCO MANAGEMENT ==="
                    echo "Acción: ${params.ACTION}"
                    echo "Servicio: ${params.SERVICE}"
                    
                    bat """
                        if exist ${REPORTS_DIR} rmdir /s /q ${REPORTS_DIR}
                        mkdir ${REPORTS_DIR}
                    """
                    
                    def service = params.SERVICE.toLowerCase()
                    def serviceMap = [
                        'frontend': 'frontend-1',
                        'backend': 'backend-1', 
                        'postgres': 'postgres-1'
                    ]
                    
                    switch(params.ACTION) {
                        case 'DEPLOY':
                            bat 'docker-compose -f compose2.yml down || echo "No containers"'
                            bat 'docker-compose -f compose2.yml up -d'
                            sleep(time: 30, unit: 'SECONDS')
                            echo "✅ Aplicaciones desplegadas"
                            break
                            
                        case 'STATUS':
                            bat """
                                echo ESTADO DE SERVICIOS > ${REPORTS_DIR}\\status.txt
                                echo =================== >> ${REPORTS_DIR}\\status.txt
                                docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}" >> ${REPORTS_DIR}\\status.txt
                                echo. >> ${REPORTS_DIR}\\status.txt
                                echo RECURSOS: >> ${REPORTS_DIR}\\status.txt
                                docker stats --no-stream --format "table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}" >> ${REPORTS_DIR}\\status.txt
                            """
                            echo "✅ Estado capturado"
                            break
                            
                        case 'LOGS':
                            if (service == 'all') {
                                bat """
                                    docker logs frontend-1 --tail=50 > ${REPORTS_DIR}\\frontend-logs.txt 2>&1 || echo "No logs"
                                    docker logs backend-1 --tail=50 > ${REPORTS_DIR}\\backend-logs.txt 2>&1 || echo "No logs"
                                    docker logs postgres-1 --tail=50 > ${REPORTS_DIR}\\postgres-logs.txt 2>&1 || echo "No logs"
                                """
                            } else {
                                def containerName = serviceMap[service]
                                if (containerName) {
                                    bat "docker logs ${containerName} --tail=100 > ${REPORTS_DIR}\\${service}-logs.txt 2>&1 || echo 'No logs'"
                                }
                            }
                            echo "✅ Logs recolectados"
                            break
                            
                        case 'RESTART':
                            if (service == 'all') {
                                bat 'docker-compose -f compose2.yml restart'
                            } else {
                                def containerName = serviceMap[service]
                                if (containerName) {
                                    bat "docker restart ${containerName}"
                                }
                            }
                            echo "✅ Servicio(s) reiniciado(s)"
                            break
                    }
                }
            }
        }
        
        stage('Generate Report') {
            steps {
                script {
                    // Verificar servicios
                    def frontendOk = false
                    def backendOk = false
                    def postgresOk = false
                    
                    try {
                        bat 'powershell -Command "Test-NetConnection -ComputerName localhost -Port 8070 -WarningAction SilentlyContinue"'
                        frontendOk = true
                    } catch (Exception e) {
                        // Service might be down
                    }
                    
                    try {
                        bat 'powershell -Command "Test-NetConnection -ComputerName localhost -Port 8090 -WarningAction SilentlyContinue"'
                        backendOk = true
                    } catch (Exception e) {
                        // Service might be down
                    }
                    
                    try {
                        bat 'powershell -Command "Test-NetConnection -ComputerName localhost -Port 5433 -WarningAction SilentlyContinue"'
                        postgresOk = true
                    } catch (Exception e) {
                        // Service might be down
                    }
                    
                    // Generar reporte
                    bat """
                        echo ================================ > ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo    PRESTABANCO MANAGEMENT      >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo ================================ >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo Build: ${BUILD_NUMBER} >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo Fecha: %date% %time% >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo Accion: ${params.ACTION} >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo Servicio: ${params.SERVICE} >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo ESTADO DE SERVICIOS: >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo   Frontend:  ${frontendOk ? 'ACTIVO' : 'INACTIVO'} (Puerto 8070) >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo   Backend:   ${backendOk ? 'ACTIVO' : 'INACTIVO'} (Puerto 8090) >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo   Database:  ${postgresOk ? 'ACTIVO' : 'INACTIVO'} (Puerto 5433) >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo ACCESO DIRECTO: >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo   Frontend:  http://localhost:8070 >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo   Backend:   http://localhost:8090 >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo   Database:  localhost:5433 >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo CONTENEDORES ACTUALES: >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        docker ps --format "  {{.Names}} - {{.Status}}" | findstr -v "CONTAINER" >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo HERRAMIENTA DEVSECOPS: >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo   Etapa: OPERATE/MONITOR >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo   Funcion: Gestion de contenedores >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo   Beneficio: Monitoreo basico >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo COMANDOS UTILES: >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo   Ver logs:    docker logs [container] >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo   Reiniciar:   docker restart [container] >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo   Estado:      docker ps >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo. >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                        echo OPERACION COMPLETADA EXITOSAMENTE >> ${REPORTS_DIR}\\REPORTE-FINAL.txt
                    """
                    
                    currentBuild.result = 'SUCCESS'
                }
            }
        }
    }
    
    post {
        always {
            script {
                archiveArtifacts artifacts: "${REPORTS_DIR}/**", allowEmptyArchive: true
                
                echo """
                ================================
                   PRESTABANCO MANAGEMENT
                ================================
                
                ACCION: ${params.ACTION}
                SERVICIO: ${params.SERVICE}
                
                RESULTADOS:
                  Frontend:  http://localhost:8070
                  Backend:   http://localhost:8090
                  Database:  localhost:5433
                
                ARCHIVOS: ${BUILD_URL}artifact/${REPORTS_DIR}/
                ESTADO: ${currentBuild.result}
                ================================
                """
            }
        }
        
        success {
            echo "✅ Operación completada con éxito"
        }
        
        failure {
            echo "❌ Error en la operación"
        }
    }
}