version: '3.8'

services:
  # Frontend con logging directo a ELK
  frontend:
    image: kahaozeng/prestabanco-frontend:latest
    container_name: frontend-1
    ports:
      - "8070:80"
    depends_on:
      - backend
      - logstash
    networks:
      - app-network
    # INTEGRACIÓN DIRECTA CON ELK - CORREGIDA
    logging:
      driver: gelf
      options:
        gelf-address: "udp://logstash:12201"  # Usar el nombre del servicio
        tag: "prestabanco.frontend"
        gelf-compression-type: "none"
        gelf-compression-level: "1"

  # Backend con logging directo a ELK
  backend:
    image: kahaozeng/prestabanco-backend:latest
    container_name: backend-1
    environment:
      DB_HOST: postgres
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/prestabanco
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
    ports:
      - "8090:8090"
    depends_on:
      - postgres
      - logstash
    networks:
      - app-network
    # INTEGRACIÓN DIRECTA CON ELK - CORREGIDA
    logging:
      driver: gelf
      options:
        gelf-address: "udp://logstash:12201"  # Usar el nombre del servicio
        tag: "prestabanco.backend"
        gelf-compression-type: "none"
        gelf-compression-level: "1"

  # PostgreSQL 
  postgres:
    image: postgres:latest
    container_name: postgres-1
    environment:
      POSTGRES_DB: prestabanco
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    ports:
      - "0.0.0.0:5433:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - app-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch-1
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana-1
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Logstash configurado para recibir logs de Docker - CORREGIDO
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash-1
    ports:
      - "12201:12201/udp"  # Puerto GELF para Docker
      - "5000:5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./logstash-config:/usr/share/logstash/pipeline/
    # Configuración inline mejorada
    command: >
      bash -c "
      cat > /usr/share/logstash/pipeline/logstash.conf << 'EOF'
      input {
        gelf {
          port => 12201
          codec => json
        }
        # Entrada adicional para testing
        tcp {
          port => 5000
          codec => json
        }
      }
      
      filter {
        # Debug: mostrar todos los campos recibidos
        ruby {
          code => 'logger.info(\"Received event\", :event => event.to_hash)'
        }
        
        # Procesar tags de Docker
        if [tag] =~ /prestabanco\.frontend/ {
          mutate {
            add_field => { \"service\" => \"frontend\" }
            add_field => { \"app_type\" => \"nginx\" }
          }
        }
        if [tag] =~ /prestabanco\.backend/ {
          mutate {
            add_field => { \"service\" => \"backend\" }
            add_field => { \"app_type\" => \"spring-boot\" }
          }
        }
        
        # Agregar metadata
        mutate {
          add_field => { \"application\" => \"prestabanco\" }
          add_field => { \"environment\" => \"development\" }
        }
        
        # Asegurar timestamp
        if ![\"@timestamp\"] {
          ruby {
            code => 'event.set(\"@timestamp\", Time.now)'
          }
        }
        
        # Parser para logs de Nginx (frontend)
        if [service] == \"frontend\" {
          grok {
            match => { 
              \"message\" => \"%{COMBINEDAPACHELOG}\" 
            }
            tag_on_failure => [\"_grokparsefailure_nginx\"]
          }
        }
        
        # Parser para logs de Spring Boot (backend)
        if [service] == \"backend\" {
          grok {
            match => { 
              \"message\" => \"%{TIMESTAMP_ISO8601:log_timestamp}\\s+%{LOGLEVEL:log_level}\\s+%{NUMBER:pid}\\s+---\\s+\\[%{DATA:thread}\\]\\s+%{DATA:class}\\s+:\\s+%{GREEDYDATA:log_message}\" 
            }
            tag_on_failure => [\"_grokparsefailure_springboot\"]
          }
        }
      }
      
      output {
        # Salida principal a Elasticsearch
        elasticsearch {
          hosts => [\"elasticsearch:9200\"]
          index => \"prestabanco-docker-logs-%{+YYYY.MM.dd}\"
          template_overwrite => true
        }
        
        # Debug: mostrar en stdout
        stdout { 
          codec => rubydebug 
        }
        
        # Salida condicional para diferentes tipos de logs
        if [service] == \"frontend\" {
          elasticsearch {
            hosts => [\"elasticsearch:9200\"]
            index => \"prestabanco-frontend-logs-%{+YYYY.MM.dd}\"
          }
        }
        
        if [service] == \"backend\" {
          elasticsearch {
            hosts => [\"elasticsearch:9200\"]
            index => \"prestabanco-backend-logs-%{+YYYY.MM.dd}\"
          }
        }
      }
      EOF
      
      # Iniciar Logstash
      /usr/local/bin/docker-entrypoint
      "

networks:
  app-network:
    driver: bridge

volumes:
  postgres:
    external: true
  elasticsearch_data:
    driver: local